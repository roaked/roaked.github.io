[{"id":0,"href":"/docs/1design/","title":"Design Portfolio","section":"Docs","content":" Workflow # Hey hey! Welcome to my design project hangout â€” a mashup of my academic journey and awesome collaborations. This place is packed with my adventures in Computational Fluid Dynamics (CFD), Finite Element Analysis (FEA), and loads of cool 3D CAD projects.\nPicture this: late-night brainstorming, diving into simulations of fluid dynamics, thermal analysis, and structural mechanics, and then making those wild ideas real. It\u0026rsquo;s like a ride where design and simulation crash together in the coolest ways.\nI\u0026rsquo;m totally up for collaborating on any design projects â€” let\u0026rsquo;s create something new!\n"},{"id":1,"href":"/docs/3research/1ebeam/","title":"Electron Beam Welding","section":"Research","content":" Thermally Induced Reduction of Hot Cracking Susceptibility # In this following list, I showcase some of the projects I developped either through findings during my academic journey or some extracurricular projects with a few of my fellow friends. Hope you enjoy!\n#1 Master # "},{"id":2,"href":"/docs/2code/1drone/","title":"RedBull Racing Competition","section":"Coding Portfolio","content":" An Autonomous Drone Racing Competition # 1 RedBull Racing # The world of Red Bull drone racing stands at the intersection of high-speed competition and very advanced technology. In this exhilarating arena, unmanned aerial vehicles (UAVs) navigate intricate courses filled with obstacles, pushing the limits of flight capabilities and piloting skills. To revolutionize this dynamic sport, our project aims to integrate advanced AI, computer vision, and simulated dynamics to elevate drone performance and safety within the competitive realm.\n2 Overview # This interesting concept revolves around the development of a comprehensive system that seamlessly combines state-of-the-art technologies to enhance Red Bull drone racing. It is desired to fuse AI-driven algorithms, computer vision systems, and simulated dynamics modeling to optimize drone navigation through complex racecourses.\nThe branches in which we are hoping to develop are:\nComputer Vision or AI-Enabled Obstacle Detection and Avoidance: Implement sophisticated AI algorithms coupled with computer vision systems onboard the drones. These systems will enable real-time obstacle detection and swift maneuvering to avoid collisions during high-speed races.\nSimulated Dynamics Modeling: Develop intricate models that encapsulate the intricate dynamics of the drones, including aerodynamics, motor responses, and environmental interactions. This simulation will accurately predict drone behavior in various scenarios, aiding in performance optimization.\nSimulink Integration via TCP/IP: Establish a robust connection between the simulated drone dynamics model in Simulink and the actual drones using TCP/IP. This connection facilitates real-time communication, enabling testing and refinement of control algorithms in a virtual environment. This will be done by using an external library.\nThis approach enhances drone maneuverability and agility when navigating intricate racecourses, elevates safety by detecting and avoiding obstacles in real time, and fine-tunes control algorithms for high-speed racing situations.\n3 Sections # I have decided to structured into distinct sections to comprehensively cover various aspects of the design and coding parts:\nDrone System Dynamics Modeling and Controller Design: This section will focus on developing and analyzing models for the drone\u0026rsquo;s dynamics. It will delve into understanding how the drone behaves under different conditions and designing an appropriate controller to optimize its performance.\nDrone Computer Vision for Obstacle Detection: This part will concentrate on integrating computer vision techniques into the drone system. It aims to enable real-time obstacle detection and avoidance strategies, enhancing the drone\u0026rsquo;s ability to navigate complex environments.\nIntegration of AI with System Components: This section aims to unify AI algorithms with the previously developed system dynamics model, controller, and computer vision capabilities. It seeks to leverage AI to further enhance overall performance, responsiveness, and decision-making of the drone during Red Bull racing scenarios.\nBy splitting the report into these segments, we aim to explore each aspect thoroughly while maintaining a clear focus on how these components can synergize to enhance the capabilities of Red Bull racing drones.\n"},{"id":3,"href":"/docs/1design/1mest/","title":"Structural Mechanics","section":"Design Portfolio","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret "},{"id":4,"href":"/docs/2code/","title":"Coding Portfolio","section":"Docs","content":" Workflow # Hey hey! Welcome to my coding project hub â€” a spot where you\u0026rsquo;ll find the fruits of my academic hustle. These projects? They\u0026rsquo;re like little milestones in my coding journey, from cracking algorithmic puzzles to diving deep into data analysis.\nBut hey, it\u0026rsquo;s not just textbooks and lectures (though I have a soft spot for the math and logic behind it) â€” I\u0026rsquo;ve teamed up with some awesome friends from all corners of the globe. My playground has been a mix of deciphering data, diving into the realms of AI, tinkering with robotics, and optimizing systems using clever computational techniques.\nI\u0026rsquo;m a firm believer in code\u0026rsquo;s magic to bring ideas to life, and I\u0026rsquo;m stoked to give you a peek into my coding adventures. Take a tour through these projects; hope they spark as much joy in you as they did in me!\nShoot me a message if you are interested in more. ðŸ¤“âœ¨\n"},{"id":5,"href":"/docs/2code/1drone/_index2/","title":"Drone Dynamics \u0026 Controller","section":"RedBull Racing Competition","content":" System Dynamics \u0026amp; Controller # 1 System Dynamics Modeling # Breaking down the drone into subsystems helps manage its complexity. The quadrotor has three main parts:\nActuation System: This handles the rotors\u0026rsquo; model, the forces they generate (Fp), and the moments they create (Mp). Each rotor gets an input voltage (Vmi) and produces an angular velocity ( \\(\\Omega\\) i).\nMovement System: This part deals with forces (not just from rotors but also external factors like wind) and moments that drive the drone\u0026rsquo;s movement. It uses physics laws, dynamics, and kinematics to determine the drone\u0026rsquo;s position and velocity.\nInstrumentation System: This part involves the sensor model. In this project phase, the sensors are simplified as ideal sensors, meaning they have a gain of one.\nBreaking it down this way helps in focusing on and understanding each aspect separately, making the overall understanding and development of the drone more manageable.\n1.1 Actuation Subsystem # The actuation subsystem involves individual DC motors powering propellers to generate lift forces in the drone\u0026rsquo;s four independently controlled motors (i=1,2,3,4). The values of I and \\(\\Omega\\) change over time based on the applied motor voltage, Vm, while constants like Lm, Rm, Ke, Kt, and Jm characterize the motor. This results in a second-order system for each drone motor, expressed as:\n\\[\\dot{\\tilde{x}} = A\\tilde{x} \u0026#43; B\\tilde{u} = \\begin{bmatrix} \\dot{\\tilde{I}}_i \\\\ \\dot{\\tilde{\\Omega}} \\end{bmatrix} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ a_{21} \u0026amp; a_{22} \\end{bmatrix} \\begin{bmatrix} \\tilde{I}_i \\\\ \\Omega \\end{bmatrix} \u0026#43; \\begin{bmatrix} b_2 \\\\ 0 \\end{bmatrix} \\tilde{V}_m\\] \\[\\tilde{y} = C\\tilde{x} \u0026#43; D\\tilde{u} = \\Omega, \\quad i = [0 \\, 1]\\] The parameters in matrices A and B are determined by the motor specifications and the chosen flight conditions for linearization.\n1.1.1 Model and Linearization # The actuation subsystem dynamics are defined by the following nonlinear equations:\n\\[\\dot{I}_i = \\frac{1}{L_m} (V_{mi} - R_{m}I_{i} - K_{e}\\Omega_{i})\\] \\[\\dot{\\Omega}_i = \\frac{1}{J_m} (K_t I_i - Q_i - B_m\\Omega_{i})\\] \\[\\text{Where: } Q_i = K_Q \\Omega_i^2\\] To linearize this model, a nominal point around which small deviations are considered for the variables I, Vm and Î© is selected, representing the hovering condition:\n\\[I_i = I_o \u0026#43; \\tilde{I}_i\\] \\[V_{mi} = V_{mo} \u0026#43; \\tilde{V}_{mi}\\] \\[\\Omega_i = \\Omega_{io} \u0026#43; \\tilde{\\Omega}_{i}\\] Using these relationships, the linearized dynamics are obtained as:\n\\[\\dot{\\tilde{I}}_i = \\frac{1}{L_m} (\\tilde{V}_{mi} - R_m \\tilde{I}_i - K_e \\tilde{\\Omega}_i)\\] \\[\\dot{\\tilde{\\Omega}}_i = \\frac{1}{J_m} (K_t \\tilde{I}_{i} - 2 K_Q \\Omega_{io} \\tilde{\\Omega}_i - B_m \\tilde{\\Omega}_i)\\] The linearized state space model for each actuation subsystem, where the output is the motor angular speed, is given by:\n\\[\\begin{bmatrix} \\dot{I}_i \\\\ \\dot{\\Omega}_i \\end{bmatrix} = \\begin{bmatrix} -L_m R_m \u0026amp; J_m K_t \\\\ -L_m K_e \u0026amp; -J_m 2K_Q \\Omega_{io} \u0026#43; B_m \\end{bmatrix} \\begin{bmatrix} I_i \\\\ \\Omega_i \\end{bmatrix} \u0026#43; \\begin{bmatrix} L_{m1} \\\\ 0 \\end{bmatrix} \\tilde{V}_{mi}\\] The state space variables are, therefore, \\(\\tilde{I}_i\\) and \\(\\tilde{\\Omega}_i\\) . The only input provided to each motor is the applied voltage \\(\\tilde{V}_{m_i}\\) . The state space model for the complete actuation subsystem can be obtained by combining the state space models for each motor into a single state space model:\n\\[| | | | | | |--|--|--|--|--| \\(\\dot{\\tilde{I}}_1\\) | \\(A_1\\) | 0 | 0 | 0 | \\(\\dot{\\tilde{\\Omega}}_1\\) | 0 | \\(A_2\\) | 0 | 0 | \\(\\dot{\\tilde{I}}_2\\) | 0 | 0 | \\(A_3\\) | 0 | \\(\\dot{\\tilde{\\Omega}}_2\\) | 0 | 0 | 0 | \\(A_4\\) | \\(\\dot{\\tilde{I}}_3\\) | \\(B_1\\) | 0 | 0 | 0 | \\(\\dot{\\tilde{\\Omega}}_3\\) | 0 | \\(B_2\\) | 0 | 0 | \\(\\dot{\\tilde{I}}_4\\) | 0 | 0 | \\(B_3\\) | 0 | \\(\\dot{\\tilde{\\Omega}}_4\\) | 0 | 0 | 0 | \\(B_4\\) |\\] \\[| | | | | | | | | | |--|--|--|--|--|--|--|--|--| \\(\\tilde{\\Omega}_1\\) | 0 | 1 | 0 | 0 | 0 | 0 | 0 | \\(\\tilde{\\Omega}_2\\) | 0 | 0 | 0 | 1 | 0 | 0 | 0 | \\(\\tilde{\\Omega}_3\\) | 0 | 0 | 0 | 0 | 0 | 1 | 0 | \\(\\tilde{\\Omega}_4\\) | 0 | 0 | 0 | 0 | 0 | 0 | 1 |\\] Each matrix Ai and Bi represent a 2 Ã— 2 matrix. As all four motors share identical parameters, the matrices Ai and Bi exhibit identical properties. However, due to the independent dynamics of each motor, the subsystem analysis simplifies. Subsequent sections will confirm the motors\u0026rsquo; rapid response times, allowing an approximation using a static gain, as demonstrated:\n\\[\\delta_i = K_{\\Omega} \\Omega_i\\] With this outcome in consideration, we can represent the angular velocities \\(\\Omega_i\\) solely as a function of the voltage constant \\(K_{\\Omega}_i\\) and the actuations \\(\\delta_i\\) \\[| | | | | | |--|--|--|--|--| \\(\\Omega_1\\) | 1 | \\(K_{\\Omega}\\) | 0 | 0 | \\(\\Omega_2\\) | 0 | 1 | \\(K_{\\Omega}\\) | 0 | \\(\\Omega_3\\) | 0 | 0 | 1 | \\(K_{\\Omega}\\) | \\(\\Omega_4\\) | 0 | 0 | 0 | 1 |\\] This process essentially proportionally adjusts the input variablesâ€‹ \\(\\delta_i\\) . Labeling the diagonal matrix as \\(T_M\\) we can express this relationship by considering the linear deviations around the nominal operating point.\n\\[\\tilde{\\Omega} = T_M \\tilde{\\delta}\\] 1.1.2 Transfer Function Model # With the state space model acquired for the actuation subsystem, it is possible to derive the transfer function.\n\\[G(s) = C(sI - A)^{-1}B \u0026#43; D\\] The relationship between the output (angular speed â€‹ \\(\\tilde{\\Omega}_i\\) ) and the input (applied voltage â€‹ \\(\\tilde{V}_{mi}\\) ) is expressed as the transfer function:\n\\[G(s) = \\frac{\\tilde{\\Omega}_i(s)}{\\tilde{V}_{mi}(s)} = \\begin{bmatrix} 0 \u0026amp; 1 \\end{bmatrix} \\begin{bmatrix} \\frac{s \u0026#43; R_m/L_m}{s \u0026#43; \\frac{K_e}{L_m} - \\frac{K_t}{J_m}} \u0026amp; \\frac{-K_t}{J_m(s \u0026#43; 2K_Q\\Omega_i \u0026#43; B_m/J_m)} \\end{bmatrix}^{-1} \\begin{bmatrix} 1 \\\\ \\frac{1}{L_m} \\\\ 0 \\end{bmatrix}\\] When the aforementioned parameters are replaced with typical values for a DC motor, the resulting transfer function model can be represented.\n\\[G(s) = \\frac{4.901 \\times 10^6}{s^2 \u0026#43; 576.3s \u0026#43; 1.687 \\times 10^5}\\] "},{"id":6,"href":"/docs/1design/2thermo/","title":"ThermoCup","section":"Design Portfolio","content":" ThermoCup # 1.1 What is the ThermoCup? # ThermoCup is a unique competition introduced initially at the Technical University of Lisbon during the MecanIST conferences in early 2016. Its primary objective is to challenge participants to conceive, design, and construct a steam boat. The competition covers a comprehensive spectrum of engineering aspects, incorporating various stages of the project lifecycle, from the initial conceptualization and design phase to the practical implementation, prototyping, and subsequent optimization processes.\n1.2 Transversal Disciplines # The challenges within ThermoCup likely encompass a range of engineering disciplines, including:\nMechanical Engineering: To design the physical structure of the steam boat, accounting for structural integrity and efficiency.\nThermal Engineering: Understanding and optimizing the heat transfer mechanisms involved in generating steam to power the boat.\nFluid Dynamics: Analyzing the flow of steam and water within the boat\u0026rsquo;s components to maximize propulsion and efficiency.\nComputational Modeling: Employing Ansys Fluent workbench for virtual simulations to predict and optimize the boat\u0026rsquo;s performance before physical construction.\n1.3 Initial Considerations # In the context of designing a steam boat for ThermoCup, the significance of defining boundary conditions and material selection cannot be overstated. These initial steps essentially set the groundwork for the entire project, exerting a profound influence on the boat\u0026rsquo;s performance and its eventual success in the competition.\nBoundary Conditions: Determining the environmental constraints, operational parameters, and physical limitations within which the steam boat will be mainly vital to perform CFD simulations. This includes factors such as the type of water body the boat will navigate, assumption of variations in temperature and pressure, and even limitations on the size and weight of the boat. In this case, it was intended to be an indoors competition - involving not so high velocities. Hence, mostly laminar flow, therefore a lot of simplifications were conducted to get a rough estimation of how each parameter would impact our results. However, accurately defining these boundary conditions allows participants to tailor their designs to suit real-world scenarios, ensuring the boat\u0026rsquo;s functionality under specific circumstances.\nMaterial Selection: The choice of materials for constructing the steam boat significantly impacts its structural integrity, weight, buoyancy, and overall performance. For instance, selecting lightweight yet durable materials for the boat\u0026rsquo;s structure can enhance its maneuverability and efficiency. Similarly, heat-resistant materials might be crucial for components exposed to high temperatures in the steam propulsion system.\nBut\u0026hellip;\nKeep in mind that the competition\u0026rsquo;s rules imposed caused certain constraints or guidelines regarding the materials that can be used, limitating creativity work to develop within those boundaries.\n1.4 Computational Fluid Dynamics # The utilization of Computational Fluid Dynamics (CFD) simulations with Ansys Fluent workbench within the ThermoCup competition marked a significant and intriguing facet of the event. Ansys Fluent is a robust software suite widely employed in engineering disciplines to simulate and analyze fluid flow, heat transfer, and associated phenomena in intricate detail.\nIn the context of ThermoCup, the incorporation of Ansys Fluent implied a multifaceted challenge for everyone beyond merely constructing a physical steam boat! It introduced a dimension where participants leverage advanced virtual simulations to iteratively refine their designs and optimize the performance of their boats via:\nVirtual Prototyping Performance Optimization Predictive Analysis Surely using machine learning tools this could have been more efficient, but for that moment it yielded good results!\n1.5 Our Solution # Attempts 1 Attempts 2 Attempts ALL After countless combinations of material and design, the choice of cork as the structural material for the steam boat in the ThermoCup competition seemed to have been a well-considered decision. Cork is known for its buoyant and lightweight properties (refer to previous Ch.2), and its higher density compared to materials like polystyrene likely provided the necessary weight and structural stability for the boat. This was especially important when simulating the boat\u0026rsquo;s performance under the natural conditions of flow, which can be challenging at higher speeds due to introduced turbulence flow and higher hydrodynamic forces, including drag and lift that can lead to steer off course as it interacts with the surrounding water.\n1.6 Outlook # \\[v_{\\text{km/h}} = \\frac{8}{18.9} \\times 3.6 \\approx 1.53\\text{ km/h}\\] Securing 3rd place in the competition, covering an 8-meter water lane in just 18.9 seconds, while achieving a average speed of 1.53 km/h, is a notable result. While it is not perfect, it compromised diverse engineering problem-solving skills between meticulous material selection and thoughtful design considerations by the team.\n"},{"id":7,"href":"/docs/2code/3sint/","title":"Deep Learning on Fake News","section":"Coding Portfolio","content":" Language Features for Detection of Fake News # 1.1 A Growing Case # Fake news, a term emblematic of fabricated information intentionally disseminated across traditional news outlets or online social platforms, embodies deliberate disinformation strategies. These falsehoods aim to tarnish individuals, entities, or gain financial or political advantages, often employing misleading, attention-grabbing headlines. Some counterfeit news pieces disguise themselves as satirical content, sounding incredulous to the point of absurdity, yet managing to deceive unsuspecting audiences.\nThe proliferation of digital media and social networks has led to a rampant increase in fake news dissemination, presenting a contemporary societal challenge. Misinformation, with its potential to adversely impact lives, demands the crucial ability to differentiate between genuine and counterfeit news. This task is intricate; genuine news might appear implausible to the average reader, while fake news endeavours to appear credible.\nAddressing this contemporary issue involves the automatic identification and prevention of fake news dissemination. Efforts by digital corporations and journalistic agencies have attempted to combat fake news, but these solutions have shown imperfections. Academic research has delved into understanding the propagation of fake news, recognizing language usage as a vital parameter in these investigations.\nStudies such as those by Mahyoob in his paper titled \u0026ldquo;Linguistic-Based Detection of Fake News in Social Media\u0026rdquo; and by Preston \u0026ldquo;Detecting fake news on Facebook: The role of emotional intelligence\u0026rdquo; shed light on the analysis of language characteristics in detecting fake news, providing insights, particularly for this application within the context of Portuguese news.\nAdditionally, reports by Facebook and FactCheck.org detail the challenges and strategies in combatting misinformation, emphasizing the significance of linguistic analysis in verifying news authenticity.\nIn this project, drawing upon a meticulously curated corpus comprising 3600 true and 3600 fake Portuguese news samples, collected from January 2016 to January 2018, I aimed to automatically identify fake news using aforementioned language characteristics. This endeavour relied on analyzing 21 specific language traits meticulously classified by the corpus\u0026rsquo; authors to transform news articles into metadata, aligning with methodologies outlined by academic works and industry efforts in the field.\nThe goal of this project is to utilize established machine learning techniques, as previously outlined in research by Mahyoob and Preston, employing each language characteristic as a metadata feature, to effectively identify and mitigate the spread of fake news within Portuguese-language news sources.\n1.2 Approach Brainstorming # Following the problem description, there are 21 features to be analyzed:\nFeatures (click to expand) Number Feature 1 number of tokens 2 number of words without punctuation 3 number of types 4 number of links inside the news 5 number of words in upper case 6 number of verbs 7 number of subjunctive and imperative verbs 8 number of nouns 9 number of adjectives 10 number of adverbs 11 number of modal verbs (mainly auxiliary verbs) 12 number of singular first and second personal pronouns 13 number of plural first personal pronouns 14 number of pronouns 15 pausality 16 number of characters 17 average sentence length 18 average word length 19 percentage of news with spelling errors 20 emotiveness 21 diversity The initial step towards obtaining meaningful results involves preprocessing the available data. Determining which features to utilize for further division into training and testing sets was a crucial decision point, expounded upon in the following section. How were these features selected?\nA thorough study was conducted employing statistical methods to assess the variability within each feature\u0026rsquo;s dataset. Features demonstrating minimal variation, essentially stagnant in their values, were deemed non-contributory and subsequently excluded. Once these less informative features were removed, attention shifted to observing how these features varied between fake and true news samples. Four specific linguistic features were ultimately chosen, drawing from both statistical analysis and intuitive considerations.\nTwo distinct datasets were created: one encompassing all 21 features and another featuring only the selected linguistic features. Throughout the project, these sets were compared, and the resultant differences were discussed. It was anticipated that utilizing a mere four features, compared to the full 21, might yield inferior outcomes due to the reduced dataset facilitating the differentiation between fake and genuine news.\nConsideration for computational resources remained pivotal. The project emphasized optimizing computational efficiency, recognizing that certain models, such as clustering or neural networks, could demand substantial computation power. Maintaining a balance between model complexity and computational demand was crucial. Efficiency was prioritized without compromising noticeable accuracy outcomes.\nFinally, acknowledging the variance in model results across simulations and the potential for parameter customization, efforts focused on identifying optimal parameter values for maximizing accuracy within each model. This iterative approach aimed to fine-tune model parameters for improved performance, considering the inherent variability in results across different simulations.\n1.3 Data Preprocessing # The dataset utilized in this project originated from the \u0026ldquo;Fake.Br Corpus\u0026rdquo; directly available at Roney Santos\u0026rsquo; github page specifically curated to encompass both true and false news in Brazilian Portuguese.\nThis corpus originally contained complete news articles. However, the focus narrowed down to extract the essential features embedded within each news piece. All data was initially formatted in .txt files, necessitating the development of a MATLAB script to convert it into a more manageable .mat format.\n# Preprocessing data # N = number of news N = 1:3602 # Remove news that for some reason don\u0026#39;t exist N(697) = [] N(1467) = [] for i in N: # metaInputs will be the input for the models # importfile opens the txt files and saves them as mat variables # metaInputsTrue[:,i] = importfile(sprintf(\u0026#39;%d-meta.txt\u0026#39;,i)) metaInputsFake[:,i] = importfile(sprintf(\u0026#39;%d-meta.txt\u0026#39;,i)) # metaTargets will be the targets of the neural network # metaTargetsTrue[:,i] = [1, 0] metaTargetsFake[:,i] = [0, 1] metaInputs = [metaInputsTrue metaInputsFake] metaTargets = [metaTargetsTrue metaTargetsFake] As it is seen, this transformation yielded two primary files: \u0026lsquo;metaInputs.mat,\u0026rsquo; housing parameters for all news articles, and \u0026lsquo;metaTargets.mat,\u0026rsquo; distinguishing true news (indicated by a \u0026lsquo;1\u0026rsquo; in the first row) from false news (marked with a \u0026lsquo;0\u0026rsquo; in the second row). To simplify navigation, a structural layout was adopted: the first half of the parameter files consistently represented true news, while the subsequent half constituted false news. This deliberate arrangement facilitated easier comprehension through the interpretation of variables and generated plots.\nThe dataset underwent a division into training and validation subsets. Employing a random selection method, 75% of the dataset was allocated for model training, while the remaining 25% served as a validation set.\nAnalyzing the pivotal features responsible for differentiating between authentic and deceptive news involved employing various statistical methods such as \u0026lsquo;corrplot,\u0026rsquo; \u0026lsquo;matrixplot,\u0026rsquo; and \u0026lsquo;boxplot\u0026rsquo;. However, the outcomes indicated that many features exhibited high non-linearity, posing a challenge in extracting meaningful correlations and insights.\nThe only meaningful contribution came from the Boxplot.py Python function given its concise visualization using key statistics like the minimum, quartiles, median, and maximum values, providing insights into data distribution. It efficiently identifies outliers, assesses symmetry, measures data clustering, and detects potential skewness in the dataset.\n1.4 Methodology # Previously, all methods were initially applied to the entire set of features, followed by a re-execution using only the linguistic features for comparison. This approach aimed to gauge the potential trade-off between accuracy and computational efficiency, as eliminating numerous features could expedite processing time. Moreover, the objective shifted from merely identifying blatantly obvious fake news (e.g., those with poor punctuation or grammar) to developing a model adept at detecting less instances of misinformation, as indicated by the selected linguistic features.\n1.4.1 Clustering # The clustering classification method involves creating distinct clusters based on the available features and assigning each cluster a class label, distinguishing between true and fake news.\nTwo types of clustering techniques, fuzzy c-means and k-means clustering, were employed. Crisp clustering algorithms allocate each data point to a single cluster based on quantified similarity, while fuzzy clustering allows varying degrees of membership to multiple clusters, reflecting diverse similarities.\nDetermining the optimal number of clusters was an initial consideration. Initially, there was a belief that higher cluster counts might yield better results, supported by a MATLAB function \u0026rsquo;evalclusters\u0026rsquo;. However, a comprehensive study later revealed this wasn\u0026rsquo;t always the case.\nCommencing with K-Means clustering, an algorithm using centroids and distance metrics, data points are associated with the nearest centroid, often calculated using squared Euclidean distances.\nK-means clustering partitions observations into sets to minimize the within-cluster sum of squares. The objective function minimizes the variance by grouping observations into clusters.\n\\[\\text{Cost Function} = \\text{argmin}_S k \\sum_{i=1}^{k} \\sum_{x \\in S_i} \\| x - \\mu_i \\|_2^2 = \\text{argmin}_S k \\sum_{i=1}^{k} |S_i| \\text{Var}(S_i)\\] Variables Description for K-means clustering (click to expand) S denotes the set of clusters. k represents the number of clusters. x is a data point. \\mu_i signifies the centroid associated with cluster i. S_i indicates the i^{th} cluster. Var(S_i) represents the variance of cluster i. Identifying clusters containing fake news varied across simulations due to differing cluster numbering. To resolve this, the mode was employed to determine the cluster with the most data points, logically corresponding to fake news, given an equal split between true and fake data points.\nSubsequently, fuzzy c-means clustering was executed, allowing data points to belong to multiple clusters with varying degrees of membership. Parameters such as the initial number of clusters \u0026lsquo;c\u0026rsquo; and the exponent controlling fuzzy overlap \u0026rsquo;m\u0026rsquo; were fine-tuned to optimize accuracy.\nThe FCM algorithm partitions a collection of data into fuzzy clusters, returning cluster centers and a partition matrix indicating each data point\u0026rsquo;s degree of belonging to clusters.\n\\[\\text{Cost Function} = \\text{argmin}_C \\sum_{i=1}^{n} \\sum_{i=1}^{c} w_{ij}^m \\| x_i - c_j \\|_2^2\\] Variables Description for FCM clustering (click to expand) C signifies the collection of clusters. n represents the number of data elements. c denotes the number of fuzzy clusters. x_i represents a data point. c_j signifies the j^{th} cluster center. w_{ij} represents the degree to which x_i belongs to cluster j. m represents the fuzzifier controlling cluster fuzziness. Both FCM and k-means aim to minimize objective functions; however, the addition of membership values and the fuzzifier parameter in FCM allows for fuzzier clustering. The fuzzifier \u0026rsquo;m\u0026rsquo; determines the level of cluster fuzziness, with larger \u0026rsquo;m\u0026rsquo; values resulting in fuzzier clusters, while \u0026rsquo;m=1\u0026rsquo; implies crisp partitioning.\nStudy: Evaluation of exponent \u0026rsquo;m\u0026rsquo; for all features and linguistic features (click to expand) The observed trend indicates that the peak accuracy aligns with the lowest exponent value of \u0026rsquo;m,\u0026rsquo; typically slightly above one unit. Moreover, as the value of \u0026rsquo;m\u0026rsquo; increases, there is an observable exponential decrease in accuracy.\nApplying clustering to linguistic features followed a similar process. The analysis revealed a maximum accuracy of 87.51% concerning the exponent value.\n1.4.2 Fuzzy Modelling # Fuzzy modeling uses rules that are like \u0026ldquo;if-then\u0026rdquo; statements in everyday language. These rules connect input to output in systems that work with vague or uncertain information. There are two main types of rules: one that\u0026rsquo;s easier for people to understand and gives fuzzy (not exact) outputs, and another that\u0026rsquo;s more mathematical, precise, and better for complex systems.\nTo make a fuzzy system, you start by grouping similar data together, allowing for some overlap between the groups. There are different ways to do this grouping. The number of groups usually matches the number of rules used in the system.\nIn these systems, the choice of rules affects how well they work for different tasks. Considering these differences, one type of rule, the Takagi-Sugeno model, was chosen for a specific case because it\u0026rsquo;s better suited for complex systems and provides precise outputs.\nExample: Car\u0026rsquo;s adaptive cruise control system with fuzzy logic - (click to expand) If the distance to the car in front is relatively close and the speed is moderately high, then reduce acceleration slightly. If the distance to the car in front is quite far and the speed is low, then increase acceleration moderately. In this scenario, fuzzy logic allows the system to interpret vague terms like \u0026ldquo;relatively close\u0026rdquo; or \u0026ldquo;quite far\u0026rdquo; regarding the distance to the car ahead. If the system were based on the Takagi-Sugeno model, it would precisely adjust acceleration based on these conditions, ensuring smoother driving and safer distance management. In setting up the fuzzy model, the threshold for the membership function was carefully selected to prioritize minimizing false negatives over false positives. This choice aimed to err on the side of categorizing genuine news as potentially fake rather than labeling false news as true. To pinpoint the most effective threshold value, a dedicated function was designed to identify the optimal point that maximizes the model\u0026rsquo;s accuracy. Across various simulations, this optimal threshold typically fell between 0.45 and 0.55.\nLet\u0026rsquo;s assume an ideal threshold of 0.51: a visual representation illustrates this point. News pieces with a membership value above 0.51 were classified as true (shown above the black lines), while those below were categorized as fake.\nIt was previously mentioned that increasing the number of clusters might not always lead to higher accuracy in Fuzzy Modeling. To confirm this, a study was conducted to explore the relationship between accuracy and the number of clusters.\nStudy: Impact of numbers of clusters on the model\u0026rsquo;s accuracy - (click to expand) For all features:\nFor linguistic features:\nWhile an increase in clusters appears to enhance the overall consistency of average maximum accuracy, an interesting observation arises. In the simulation involving the highest number of clusters (represented as the last point), the resulting accuracy doesn\u0026rsquo;t perfectly align with the maximum accuracy achieved. Considering that all features were utilized to attain this result, and the accuracy was already quite satisfactory, the differences among the increasing clusters aren\u0026rsquo;t distinctly noticeable.\nFor in-depth study, extracting the membership functions for each features could be done by consulting Fuzzy Modeling and Identification Toolbox fm2tex function\n1.4.3 Artifficial Neural Networks # Background: What are Artifficial Neural Networks and how do they work? - (click to expand) Artificial Neural Networks (ANNs) were initially inspired by the human brain\u0026rsquo;s structure to handle tasks where traditional algorithms struggled. To implement an effective ANN, understanding how it predicts various inputs, its associated phases, and its adaptability to new, unknown inputs is crucial.\nA Multilayer Perceptron (MLP) is a type of feedforward ANN composed of an input layer, a hidden layer, and an output layer. The hidden and output layers consist of nonlinear activation function-equipped neurons. Unlike linear perceptrons, MLPs employ supervised learning, specifically the backpropagation technique, allowing them to handle non-linear data by adjusting node biases and connection weights.\nDuring training, the network adjusts biases and weights via backpropagation to compute output values using input weights and activation functions. To compute weight adjustments (Î´w_ij), the network calculates the gradient of the Mean Squared Error (MSE) cost function and multiplies it by a learning rate (Î±).\nValidation ensures the network\u0026rsquo;s performance by comparing computed and known outputs, detecting overfitting. Testing evaluates the fully trained network using a separate set of examples.\nThe pattern recognition neural network chosen aims to classify news as true or fake based on news parameters. Data partitioned for training (70%), validation (5%), and testing (25%) using dividerand function. Mean Squared Error as the cost function was preferred over Mean Absolute Error due to its suitability for situations where large errors are undesirable.\nVarious training methods exist, with factors like problem type, network size, and memory influencing selection. For this project, Levenberg-Marquardt (LM) algorithm was chosen due to its robustness and standard usage for pattern recognition problems.\nThe activation function \u0026rsquo;tansig\u0026rsquo; (hyperbolic tangent sigmoid) was utilized for neurons to ensure smooth activation, less computation demand, and easier weight learning, aligning well with the LM algorithm.\nThe number of neurons in the hidden layer was also left to the userâ€™s choice, it was varied between 5, 10 and 15 neurons.\nLayers \u0026amp; Neurons All Features Linguistic Features [ 5 ] 96.7% 89.1% [ 10 ] 96.5% 89.1% [ 15 ] 96.5% 89.3% [2 2] 96.8% 88.7% [5 5] 96.6% 89.0% [10 10] 96.8% 89.0% [2 2 2] 96.7% 88.7% [4 4 4] 96.7% 88.6% [6 6 6] 96.6% 88.6% [2 2 2 2] 96.8% 88.8% [4 4 4 4] 96.8% 88.7% 1.5 Outcomes # Study: Confusion matrices results - (click to expand) I will add these plots later\u0026hellip; I have both a MATLAB and Python code for this. 1.5.1 Results Interpretation # After generating the confusion matrix plots, a comprehensive table was compiled to encompass all available accuracy metrics.\nModel Methods ANN T-S FIS FCM KM All Features Accuracy 97.3% 95.9% 94.1% 94.1% All Features True Positive 96.6% 93.8% 93.3% 93.3% All Features False Positive 2.9% 1.9% 5.2% 5.2% Linguistic Features Accuracy 89.0% 87.6% 87.1% 87.0% Linguistic Features True Positive 86.7% 85.8% 89.2% 89.1% Linguistic Features False Positive 8.8% 10.5% 15.1% 15.2% Upon reviewing the results from the testing set, the anticipated hierarchy of performance among models held true: neural networks outperformed fuzzy models, which, in turn, surpassed clustering methods. The accuracies obtained for all features were as follows: Artificial Neural Network (ANN) at 97.3%, Takagi-Sugeno Fuzzy Inference System (T-S FIS) at 95.9%, Fuzzy Clustering Means (FCM) at 94.1%, and K-Means (KM) also at 94.1%. As expected, the use of only linguistic features resulted in lower accuracies due to fewer comparison terms.\nObserving the performance on training versus testing sets revealed slight overfitting in the NN and T-S FIS models, showcasing approximately 1% higher accuracy in the training set. To address this issue, augmenting the dataset and employing regularization techniques could enhance model generalization, ensuring better learning of patterns from the training data.\nInterestingly, FCM and KM showed closely aligned results, especially with linguistic features where they were identical. Altering the exponent for the fuzzy partition matrix could prompt FCM to converge towards KM values.\nAll methods exhibited accuracies exceeding 94% when using all features, indicating proficient performance in categorizing news. This implies that out of 7200 news pieces, more than 6760 were accurately identified based on their features, with the highest accuracy of 97.3% signaling misclassification of only about 200 news articles.\nUsing solely linguistic features yielded satisfactory results, with all methods achieving accuracy equal to or greater than 87%. This indicates that, among 7200 news items, more than 6264 were correctly categorized based on their features. However, the highest accuracy of 89.1% suggested misidentification of 784 news articles.\nIt\u0026rsquo;s noteworthy that employing a vast number of clusters significantly escalates computational demands. Balancing computational efficiency against marginal performance improvements is crucial, as extended computation time might not necessarily yield substantial enhancements in results.\n1.5.2 My Thoughts on Applying Machine Learning for Fake News Detections # Wrapping things up, the ANN, T-S FIS, C-M, and K-M methods all delivered pretty solid outcomes, with the ANN standing out as the star performer here.\nSure, the accuracy obtained was good enough for the work performed, but in the real world, aiming for near-perfect accuracyâ€”like nudging towards that 100% markâ€”holds serious weight. Think about it, labeling something as fake when it\u0026rsquo;s not, or the other way around, carries hefty ethical, legal, and economic implications.\nBoosting accuracy is a puzzle. Tweaking model parameters or even experimenting with more clusters might help, but there\u0026rsquo;s a catchâ€”those simulations could drag on forever. Another trick is amping up the features, like diving into the writing style or digging into the website URL to suss out if the source is trustworthy. But beware, piling up features might lead to overfitting headaches.\nI could\u0026rsquo;ve explored different models too; who knows, they might\u0026rsquo;ve bumped up the accuracy. Or, here\u0026rsquo;s a thought: splitting news by their subject could\u0026rsquo;ve been a game-changer. I mean, the language in political news can be totally different from religious or society-related stuff.\nHere\u0026rsquo;s the kicker though: who\u0026rsquo;s the big shot deciding if an article\u0026rsquo;s legit or not? Right now, it\u0026rsquo;s mostly on the audience to figure that out. But can we really rely solely on them to spot the good from the bad? Food for thought, right?\n"},{"id":8,"href":"/docs/2code/1drone/_index3/","title":"Drone Computer Vision","section":"RedBull Racing Competition","content":" Computer Vision for Real-Time Obstacle Detection # 1 Computer Vision # "},{"id":9,"href":"/docs/1design/3pmec/","title":"Mechanical Project Design","section":"Design Portfolio","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret "},{"id":10,"href":"/docs/3research/","title":"Research","section":"Docs","content":" Workflow Summary # In this following list, I showcase some of the projects I developped either through findings during my academic journey or some extracurricular projects with a few of my fellow friends. Hope you enjoy!\n# "},{"id":11,"href":"/docs/1design/4mcomp/","title":"Finite Element Model Formulation","section":"Design Portfolio","content":" Mathematical Background # 1.1 Partial Differential Equations (PDEs) # In engineering and physics, problems are often described by partial differential equations (PDEs). The \u0026ldquo;strong form\u0026rdquo; refers to the original differential equation that must hold exactly throughout the domain, including both the governing equation and the boundary conditions.\nHowever, there are cases where directly solving the strong form might be challenging due to complexities in the equation, irregular geometries, or varying boundary conditions. This is where the \u0026ldquo;weak formulation\u0026rdquo; or (\u0026ldquo;weak form\u0026rdquo;) becomes advantageous.\nThe weak form introduces a relaxation of the constraints imposed by the strong form by multiplying the governing equation with a weight function (typically a test function) and integrating it over the domain. This relaxation allows for more flexibility in solution techniques and offers several advantages:\nHandling Boundary Conditions: The weak form often simplifies the imposition of different types of boundary conditions.\nSolvability: Some differential equations in the strong form might not have exact solutions or might be difficult to solve directly. The weak form can lead to a more manageable equation for numerical methods.\nAdaptability to Numerical Methods: Finite element, boundary element, and other numerical methods are often more easily applied to weak formulations due to the integral nature of the equations.\nHandling Discontinuities: In problems involving discontinuities or singularities, the weak form can handle these cases more effectively.\nMinimization of Requirements: In some cases, the requirement for differentiability or the number of times an equation needs to be differentiated is reduced, easing computational complexity.\nOverall, the weak form is favoured in many situations because it relaxes the strictness of the original problem while maintaining the essential properties required for solutions, making it more adaptable for various solution techniques, especially in numerical analysis.\n1.2 Strong Form # Let\u0026rsquo;s begin by establishing the strong formulation of the problem, which serves as the foundation of our problem. In this formulation, we encapsulate the fundamental differential equation governing the system\u0026rsquo;s behaviour. This equation, along with the precise boundary conditions and initial values, constitutes the direct representation of the underlying physical laws guiding the system\u0026rsquo;s dynamics.\n\\[\\theta - \\nabla \\cdot (k \\nabla u) = f\\] For the torsional loading problem k = 1 and f = 2. The following equations indulge:\n\\[\\frac{\\partial^2 \\phi}{\\partial x^2} \u0026#43; \\frac{\\partial^2 \\phi}{\\partial y^2} = - 2G \\theta\\] This is referring to the Prandtl stress function, which defines shear stresses as:\n\\[\\tau_{xz} = \\frac{\\partial \\phi}{\\partial y} \\text{ and } \\tau_{yz} = \\frac{\\partial \\phi}{\\partial x}\\] The resolution of a torsion problem involves solving the Prandtl equation by imposing the boundary condition around the entire perimeter of the figure, as is known:\n\\[\\phi = 0\\] To do this, the Prandtl function is divided by \\(G\\theta\\) , considering this value is not known, as follows in the next set of expressions:\n\\[\\frac{\\partial^2 \\psi}{\\partial x^2} \u0026#43; \\frac{\\partial^2 \\psi}{\\partial y^2} = - 2 \\text{ and } \\psi = \\frac{\\phi}{G \\theta}\\] \\[\\tau_{yz} = -G \\theta \\frac{\\partial \\psi}{\\partial x} \\text{ and } \\tau_{xz} = G \\theta \\frac{\\partial \\psi}{\\partial y}\\] The developed program will calculate the solution given by \\(\\psi\\) for each node, the shear stresses, and the value of torsional rigidity. The problem of \\(G \\theta\\) is solved using the formula:\n\\[G \\theta = \\frac{Mt}{J}\\] In the previous formula, the M (torsional moment) and t (thickness) take the value of 1.\n1.3 Weak Form # The weak form enables transforming the differential equation into an integral equation, where the initial approach involves integrating the equation across the entire domain. Rules are applied to obtain the weak form, namely, defining the residual by multiplying it with an arbitrary function, integrating by parts the highest-order term, and rearranging the equation. Thus:\n\\[\\iint_S \\frac{\\partial \\phi_i}{\\partial x} \\frac{\\partial \\phi_j}{\\partial x} \u0026#43; \\frac{\\partial \\phi_i}{\\partial y} \\frac{\\partial \\phi_j}{\\partial y} dA = \\iint_S 2\\phi_i dA\\] The stiffnex matrix is given by:\n\\[K_{ij} = \\iint_S \\frac{\\partial \\phi_i}{\\partial x} \\frac{\\partial \\phi_j}{\\partial x} \u0026#43; \\frac{\\partial \\phi_i}{\\partial y} \\frac{\\partial \\phi_j}{\\partial y} dx dy\\] Additionally, the load vector is presented as:\n\\[F_i = \\iint_S 2 \\phi_i dx dy\\] In the considered problem, the only essential boundary condition will be the null solution across the entire perimeter of the figure, accompanied by a distributed load of magnitude 2 applied across the entire mesh.\n1.4 Analytical Integration # Simplifying the problem\u0026rsquo;s resolution, only regular 4-node elements with 1 degree of freedom will be considered. Information from the book \u0026ldquo;Introduction to the Finite Element Method (3rd edition)\u0026rdquo; by J.N. Reddy provides the following details:\nStiffness matrix (e): \\(K^e = \\frac{k}{6ab} \\begin{bmatrix} 2(a^2\u0026#43;b^2) \u0026amp; a^2-2b^2 \u0026amp; -(a^2\u0026#43;b^2) \u0026amp; -2a^2\u0026#43;b^2\\\\ a^2-2b^2 \u0026amp; 2(a^2\u0026#43;b^2) \u0026amp; -2a^2\u0026#43;b^2 \u0026amp; -(a^2\u0026#43;b^2)\\\\ -(a^2\u0026#43;b^2) \u0026amp; -2a^2\u0026#43;b^2 \u0026amp; 2(a^2\u0026#43;b^2) \u0026amp; a^2-2b^2\\\\ -2a^2\u0026#43;b^2 \u0026amp; -(a^2\u0026#43;b^2) \u0026amp; a^2-2b^2 \u0026amp; 2(a^2\u0026#43;b^2)\\\\ \\end{bmatrix} \\) Load vector (e): \\(f^e =\\frac{fab}{4} \\begin{bmatrix} 1\\\\ 1\\\\ 1\\\\ 1\\\\ \\end{bmatrix} \\) Where \u0026lsquo;a\u0026rsquo; corresponds to the length of the base of the element, and \u0026lsquo;b\u0026rsquo; corresponds to the height of the element.\n1.5 Numerical Integration # These functions aim to calculate the elemental stiffness matrix using the Gauss-Jordan approximation, which simplifies integration to a summation. To achieve this, a coordinate transformation from \\((x,y)\\) to \\( (\\xi, \\eta) \\) is applied, while also computing the Jacobian of this transformation. Subsequently, the rules of Gauss points are employed.\nIn Gauss integration, the stiffness matrix K is computed through reduced integrals:\n\\[K_{ij} = \\frac{\\partial \\phi_i}{\\partial x} \\frac{\\partial \\phi_j}{\\partial x} \u0026#43; \\frac{\\partial \\phi_i}{\\partial y} \\frac{\\partial \\phi_j}{\\partial y} \\times J \\times w\\] \\[J = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi} \u0026amp; \\frac{\\partial x}{\\partial \\eta}\\\\ \\frac{\\partial y}{\\partial \\xi} \u0026amp; \\frac{\\partial y}{\\partial \\eta}\\\\ \\end{bmatrix} = \\frac{ab}{4}\\] In the previous Gauss integration, \u0026lsquo;w\u0026rsquo; corresponds to the integration weights. For a 1x1 integration, the integration is performed solely at the center of the element, with a weight of w = 1. For 2x1 or 1x2 integration, each \u0026lsquo;w\u0026rsquo; value represents the sum of 2 reduced integrals (2 different points within the element), and the weight is w=2. For a 2x2 integration, the summation includes 4 reduced integrals (4 different points), and w=1. The following values of \\(\\overline{x}\\) and \\(\\overline{y}\\) correspond to the Gauss points:\n\\[\\phi_1 = (1-\\frac{\\overline{y}}{b})(1-\\frac{\\overline{x}}{a}) \\quad \\quad \\phi_2 = \\frac{\\overline{x}}{a}(1-\\frac{\\overline{y}}{b})\\] \\[\\phi_3 = \\frac{\\overline{y}}{b}\\frac{\\overline{x}}{a} \\quad \\quad \\phi_4 = \\frac{\\overline{y}}{b}(1-\\frac{\\overline{x}}{a})\\] Consequently:\n\\[ \\text{1x1 Rule} : \\overline{x}=\\frac{a}{2} \\quad \\text{and} \\quad \\overline{y}=\\frac{b}{2}\\] \\[ \\text{2x2 Rule} : \\overline{x_{1,2}}=\\frac{a}{2}(1 \\pm \\sqrt{\\frac{1}{3}}) \\quad \\text{and} \\quad \\overline{y_{1,2}}=\\frac{b}{2}(1 \\pm \\sqrt{\\frac{1}{3}})\\] 1.6 Torsional Constant # After calculating the nodal solution, the torsion constant J can be determined by:\n\\[J^e = \\int_0^b \\int_0^a 2 \\psi^e dxdy = \\frac{ab}{2}(\\psi_1 \u0026#43; \\psi_2 \u0026#43; \\psi_3 \u0026#43; \\psi_4) \\qquad J = \\sum_i J_i^e\\] 1.7 Shear Stresses # \\[\\tau_{yz} = -G \\theta \\frac{\\partial \\psi}{\\partial x} = -G \\theta (\\frac{\\partial \\phi_1}{\\partial \\overline{x}}\\psi_1 \u0026#43; \\frac{\\partial \\phi_2}{\\partial \\overline{x}}\\psi_2 \u0026#43; \\frac{\\partial \\phi_3}{\\partial \\overline{x}}\\psi_3 \u0026#43; \\frac{\\partial \\phi_4}{\\partial \\overline{x}}\\psi_4)\\] \\[\\tau_{xz} = G \\theta \\frac{\\partial \\psi}{\\partial y} = G \\theta (\\frac{\\partial \\phi_1}{\\partial \\overline{y}}\\psi_1 \u0026#43; \\frac{\\partial \\phi_2}{\\partial \\overline{y}}\\psi_2 \u0026#43; \\frac{\\partial \\phi_3}{\\partial \\overline{y}}\\psi_3 \u0026#43; \\frac{\\partial \\phi_4}{\\partial \\overline{y}}\\psi_4)\\] \\[\\tau_{xy} = \\sqrt{\\tau_{yz}^2 \u0026#43;\\tau_{xz}^2}\\] 2 Time for some coding! # 2.1 READ_ME # The program starts by executing the script \u0026ldquo;MainG10.m\u0026rdquo; directly available on my github page and should contain all the subfunctions and their respective \u0026rsquo;txt\u0026rsquo; files in the respective folder. Once the program is initiated, the user inputs the data file name in the form of \u0026ldquo;nome.txt.\u0026rdquo; The data file should contain the node coordinates, connectivity matrix, and boundary conditions. The data file created for this problem is named \u0026ldquo;dadosg10.txt\u0026rdquo;.\nAfter submitting the data file, the program reads the file and automatically opens a figure displaying the mesh with numbered nodes and elements. Simultaneously, a menu with various options is displayed. The user should first choose the type of integration and then select the desired plots for shear stresses, stress contour lines, and nodal solutions. Submitting the options is done by entering the corresponding number. The program is terminated by entering the number 0.\nUpon program completion, a file is created containing the data obtained from the last integration performed.\n2.2 Validation Based on Book # The developed program has been tested for a known problem described in the book \u0026ldquo;Introduction to the Finite Element Method (3rd edition)\u0026rdquo; by J.N. Reddy - Example 8.5.6. In this example, torsion of a square section bar was considered. As the problem is axisymmetric, nodal solution and shear stresses were calculated for a quarter of the square. The following results were obtained at the nodes for the nodal solution, using a 4x4 mesh:\n"},{"id":12,"href":"/docs/1design/5om/","title":"Compound Cylindrical Gear Train","section":"Design Portfolio","content":" Introduction # "},{"id":13,"href":"/docs/2code/5od/","title":"Evolutionary Computation","section":"Coding Portfolio","content":" Introduction # "},{"id":14,"href":"/docs/2code/6auto/","title":"Industrial Automation","section":"Coding Portfolio","content":" Introduction # "},{"id":15,"href":"/docs/2code/7rman/","title":"Manipulator Robotics: JACO","section":"Coding Portfolio","content":" Introduction # "}]