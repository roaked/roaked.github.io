[{"id":0,"href":"/docs/1design/","title":"Design Portfolio","section":"Docs","content":" Workflow # Hey hey! Welcome to my design project hangout â€” a mashup of my academic journey and awesome collaborations. This place is packed with my adventures in Computational Fluid Dynamics (CFD), Finite Element Analysis (FEA), and loads of cool 3D CAD projects.\nPicture this: late-night brainstorming, diving into simulations of fluid dynamics, thermal analysis, and structural mechanics, and then making those wild ideas real. It\u0026rsquo;s like a ride where design and simulation crash together in the coolest ways.\nI\u0026rsquo;m totally up for collaborating on any design projects â€” let\u0026rsquo;s create something new!\n"},{"id":1,"href":"/docs/3research/1ebeam/","title":"Electron Beam Welding","section":"Research","content":" Thermally Induced Reduction of Hot Cracking Susceptibility # In this following list, I showcase some of the projects I developped either through findings during my academic journey or some extracurricular projects with a few of my fellow friends. Hope you enjoy!\n#1 Master # "},{"id":2,"href":"/docs/2code/1drone/","title":"RedBull Racing Competition","section":"Coding Portfolio","content":" An Autonomous Drone Racing Competition # 1 RedBull Racing # The world of Red Bull drone racing stands at the intersection of high-speed competition and very advanced technology. In this exhilarating arena, unmanned aerial vehicles (UAVs) navigate intricate courses filled with obstacles, pushing the limits of flight capabilities and piloting skills. To revolutionize this dynamic sport, I developped a model that aims to integrate advanced AI, computer vision, and simulated dynamics to elevate drone performance and safety within the competitive realm.\n2 Overview # This interesting concept revolves around the development of a comprehensive system that seamlessly combines state-of-the-art technologies to enhance Red Bull drone racing. It is desired to fuse AI-driven algorithms, computer vision systems, and simulated dynamics modeling to optimize drone navigation through complex racecourses.\nThe following topics are studied:\nComputer Vision or AI-Enabled Obstacle Detection and Avoidance: Implement sophisticated AI algorithms coupled with computer vision systems onboard the drones. These systems will enable real-time obstacle detection and swift maneuvering to avoid collisions during high-speed races.\nSimulated Dynamics Modeling: Develop intricate models that encapsulate the intricate dynamics of the drones, including aerodynamics, motor responses, and environmental interactions. This simulation will accurately predict drone behaviour in various scenarios, aiding in performance optimization.\nSimulink Integration via TCP/IP: Establish a robust connection between the simulated drone dynamics model in Simulink and the actual drones using TCP/IP. This connection facilitates real-time communication, enabling testing and refinement of control algorithms in a virtual environment. This will be done by accessing an external library.\nAs previously mentioned, this approach enhances drone maneuverability and agility when navigating intricate racecourses, elevates safety by detecting and avoiding obstacles in real time, and fine-tunes control algorithms for high-speed racing situations.\n3 Work Division # Given how complex this project turned out to be, I have decided to structure it into distinct sections to comprehensively cover various aspects of the system design:\nDrone System Dynamics Modeling and Controller Design: This section will focus on developing and analyzing models for the drone\u0026rsquo;s dynamics. It will delve into understanding how the drone behaves under different conditions and designing an appropriate controller to optimize its performance. The foundation of this section of the work draws heavily from the theoretical knowledge acquired from an external MOOC (Massive Open Online Course), developed by Prof. Alexandra Moutinho and Prof. JosÃ© Azinheira, accessible by clicking here.\nDrone Computer Vision for Obstacle Detection: This part will concentrate on integrating computer vision techniques into the drone system. It aims to enable real-time obstacle detection and avoidance strategies, enhancing the drone\u0026rsquo;s ability to navigate complex environments.\nIntegration of AI with System Components: This section aims to unify AI algorithms with the previously developed system dynamics model, controller, and computer vision capabilities. It seeks to leverage AI to further enhance overall performance, responsiveness, and decision-making of the drone during Red Bull racing scenarios.\nBy splitting the report into these segments, it is expected to inspect each aspect thoroughly while maintaining a clear focus on how these components can synergize to enhance the capabilities of Red Bull racing drones.\nCheck the left sidebar for more!\n4 Drone Characteristics # \\[\\text{Mass } M : 0.475 \\, \\text{kg} \\\\ \\text{Moment of inertia } J_{xx} : 2.2 \\times 10^{-3} \\, \\text{kg} \\cdot \\text{m}^2 \\\\ \\text{Moment of inertia } J_{yy} : 2.5 \\times 10^{-3} \\, \\text{kg} \\cdot \\text{m}^2 \\\\ \\text{Moment of inertia } J_{zz} : 4.5 \\times 10^{-3} \\, \\text{kg} \\cdot \\text{m}^2 \\\\ \\text{Arm length } b : 0.177 \\, \\text{m} \\\\ \\text{Gravity } g : 9.81 \\, \\text{m/s}^2 \\\\ \\text{Force (thrust) constant } K_T : 9.2 \\times 10^{-6} \\, \\text{N} \\cdot \\text{(rad/s)}^{-2} \\\\ \\text{Momentum constant } K_Q : 0.32 \\times 10^{-6} \\, \\text{Nm} \\cdot \\text{(rad/s)}^{-2} \\\\ \\text{Voltage constant } K_{\\Omega} : 0.002 \\, \\text{(rad/s)}^{-1} \\\\ \\text{Motor dynamics approximated by static gain} : \\delta_i \\approx K_{\\Omega} \\Omega_i \\\\\\] "},{"id":3,"href":"/docs/1design/1mest/","title":"Structural Mechanics","section":"Design Portfolio","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret "},{"id":4,"href":"/docs/2code/","title":"Coding Portfolio","section":"Docs","content":" Workflow # Hey hey! Welcome to my coding project hub â€” a spot where you\u0026rsquo;ll find the fruits of my academic hustle. These projects? They\u0026rsquo;re like little milestones in my coding journey, from cracking algorithmic puzzles to diving deep into data analysis.\nBut hey, it\u0026rsquo;s not just textbooks and lectures (though I have a soft spot for the math and logic behind it) â€” I\u0026rsquo;ve teamed up with some awesome friends from all corners of the globe. My playground has been a mix of deciphering data, diving into the realms of AI, tinkering with robotics, and optimizing systems using clever computational techniques.\nI\u0026rsquo;m a firm believer in code\u0026rsquo;s magic to bring ideas to life, and I\u0026rsquo;m stoked to give you a peek into my coding adventures. Take a tour through these projects; hope they spark as much joy in you as they did in me!\nShoot me a message if you are interested in more. ðŸ¤“âœ¨\n"},{"id":5,"href":"/docs/2code/1drone/_index2/","title":"Drone Dynamics","section":"RedBull Racing Competition","content":" Drone System Dynamics # 1 System Dynamics Modeling # Breaking down the drone into subsystems helps manage its complexity. The quadrotor has three main parts:\nActuation System: This handles the rotors\u0026rsquo; model, the forces they generate ( \\(F_p\\) ), and the moments they create ( \\(M_p\\) ). Each rotor gets an input voltage ( \\(V_{m_i}\\) ) and produces an angular velocity ( \\(\\Omega_i\\) ).\nMovement System: This part deals with forces (not just from rotors but also external factors like wind) and moments that drive the drone\u0026rsquo;s movement. It uses physics laws, dynamics, and kinematics to determine the drone\u0026rsquo;s position and velocity.\nInstrumentation System: This part involves the sensor model. In this project phase, the sensors are simplified as ideal sensors, meaning they have a gain of one.\nBreaking it down this way helps in focusing on and understanding each aspect separately, making the overall understanding and development of the drone more manageable.\n1.1 Actuation Subsystem # The actuation subsystem involves individual DC motors powering propellers to generate lift forces in the drone\u0026rsquo;s four independently controlled motors (i=1,2,3,4). The values of I and \\(\\Omega\\) change over time based on the applied motor voltage, Vm, while constants like Lm, Rm, Ke, Kt, and Jm characterize the motor. This results in a second-order system for each drone motor, expressed as:\n\\[\\dot{\\tilde{x}} = A\\tilde{x} \u0026#43; B\\tilde{u} = \\begin{bmatrix} \\dot{\\tilde{I}}_i \\\\ \\dot{\\tilde{\\Omega}} \\end{bmatrix} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ a_{21} \u0026amp; a_{22} \\end{bmatrix} \\begin{bmatrix} \\tilde{I}_i \\\\ \\Omega \\end{bmatrix} \u0026#43; \\begin{bmatrix} b_2 \\\\ 0 \\end{bmatrix} \\tilde{V}_m\\] \\[\\tilde{y} = C\\tilde{x} \u0026#43; D\\tilde{u} = \\Omega, \\quad i = [0 \\, 1]\\] The parameters in matrices A and B are determined by the motor specifications and the chosen flight conditions for linearization.\n1.1.1 Model and Linearization # The actuation subsystem dynamics are defined by the following nonlinear equations:\n\\[\\dot{I}_i = \\frac{1}{L_m} (V_{mi} - R_{m}I_{i} - K_{e}\\Omega_{i})\\] \\[\\dot{\\Omega}_i = \\frac{1}{J_m} (K_t I_i - Q_i - B_m\\Omega_{i})\\] \\[\\text{Where: } Q_i = K_Q \\Omega_i^2\\] To linearize this model, a nominal point around which small deviations are considered for the variables I, Vm and Î© is selected, representing the hovering condition:\n\\[I_i = I_o \u0026#43; \\tilde{I}_i\\] \\[V_{mi} = V_{mo} \u0026#43; \\tilde{V}_{mi}\\] \\[\\Omega_i = \\Omega_{i_o} \u0026#43; \\tilde{\\Omega}_{i}\\] Using these relationships, the linearized dynamics are obtained as:\n\\[\\dot{\\tilde{I}}_i = \\frac{1}{L_m} (\\tilde{V}_{m_i} - R_m \\tilde{I}_i - K_e \\tilde{\\Omega}_i)\\] \\[\\dot{\\tilde{\\Omega}}_i = \\frac{1}{J_m} (K_t \\tilde{I}_{i} - 2 K_Q \\Omega_{i_o} \\tilde{\\Omega}_i - B_m \\tilde{\\Omega}_i)\\] The linearized state space model for each actuation subsystem, where the output is the motor angular speed, is given by:\n\\[\\begin{bmatrix} \\dot{I}_i \\\\ \\dot{\\Omega}_i \\end{bmatrix} = \\begin{bmatrix} -\\frac{R_m}{L_m} \u0026amp; -\\frac{K_e}{L_m} \\\\ \\frac{K_t}{J_m} \u0026amp; -\\frac{K_Q \\Omega_{i_o}\u0026#43;B_m}{J_m} \\end{bmatrix} \\begin{bmatrix} \\tilde{I_i} \\\\ \\tilde{\\Omega}_i \\end{bmatrix} \u0026#43; \\begin{bmatrix} \\frac{1}{L_m} \\\\ 0 \\\\ \\end{bmatrix} \\tilde{V}_{mi}\\] The state space variables are, therefore, \\( \\tilde{I}_i \\) and \\( \\tilde{\\Omega}_{i} \\) . The only input provided to each motor is the applied voltage \\( \\tilde{V}_{m_{i}} \\) . The state space model for the complete actuation subsystem can be obtained by combining the state space models for each motor into a single state space model:\n\\[ \\begin{bmatrix} \\dot{\\tilde{I}}_1 \\\\ \\dot{\\tilde{\\Omega}}_1 \\\\ \\dot{\\tilde{I}}_2 \\\\ \\dot{\\tilde{\\Omega}}_2 \\\\ \\dot{\\tilde{I}}_3 \\\\ \\dot{\\tilde{\\Omega}}_3 \\\\ \\dot{\\tilde{I}}_4 \\\\ \\dot{\\tilde{\\Omega}}_4 \\\\ \\end{bmatrix} = \\begin{bmatrix} A_1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; A_2 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; A_3 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; A_4 \\\\ \\end{bmatrix} \\begin{bmatrix} \\tilde{I}_1 \\\\ \\tilde{\\Omega}_1 \\\\ \\tilde{I}_2 \\\\ \\tilde{\\Omega}_2 \\\\ \\tilde{I}_3 \\\\ \\tilde{\\Omega}_3 \\\\ \\tilde{I}_4 \\\\ \\tilde{\\Omega}_4 \\\\ \\end{bmatrix} \u0026#43; \\begin{bmatrix} B_1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; B_2 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; B_3 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; B_4 \\\\ \\end{bmatrix} \\begin{bmatrix} \\dot{\\tilde{V}}_{m1} \\\\ 0 \\\\ \\dot{\\tilde{V}}_{m2} \\\\ 0 \\\\ \\dot{\\tilde{V}}_{m3} \\\\ 0 \\\\ \\dot{\\tilde{V}}_{m4} \\\\ 0 \\\\ \\end{bmatrix} \\\\\\] \\[\\begin{bmatrix} \\tilde{\\Omega}_1 \\\\ \\tilde{\\Omega}_2 \\\\ \\tilde{\\Omega}_3 \\\\ \\tilde{\\Omega}_4 \\\\ \\end{bmatrix} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\ \\end{bmatrix} \\begin{bmatrix} \\tilde{I}_1 \\\\ \\tilde{\\Omega}_1 \\\\ \\tilde{I}_2 \\\\ \\tilde{\\Omega}_2 \\\\ \\tilde{I}_3 \\\\ \\tilde{\\Omega}_3 \\\\ \\tilde{I}_4 \\\\ \\tilde{\\Omega}_4 \\\\ \\end{bmatrix}\\] Each matrix Ai and Bi represent a 2 Ã— 2 matrix. As all four motors share identical parameters, the matrices Ai and Bi exhibit identical properties. However, due to the independent dynamics of each motor, the subsystem analysis simplifies. Subsequent sections will confirm the motors\u0026rsquo; rapid response times, allowing an approximation using a static gain, as demonstrated:\n\\[\\delta_i = K_{\\Omega} \\Omega_i\\] With this outcome in consideration, the angular velocities \\(\\Omega_i\\) can be presented solely as a function of the voltage constant \\(K_{\\Omega}_i\\) and the actuations \\(\\delta_i\\) \\[\\begin{bmatrix} \\Omega_1 \\\\ \\Omega_2 \\\\ \\Omega_3 \\\\ \\Omega_4 \\\\ \\end{bmatrix} = \\begin{bmatrix} 1 \u0026amp; K_{\\Omega} \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 1 \u0026amp; K_{\\Omega} \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; K_{\\Omega} \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\ \\end{bmatrix} \\begin{bmatrix} \\delta_1 \\\\ \\delta_2 \\\\ \\delta_3 \\\\ \\delta_4 \\\\ \\end{bmatrix} \\\\\\] This process essentially proportionally adjusts the input variablesâ€‹ \\(\\delta_i\\) . Labeling the diagonal matrix as \\(T_M\\) , this relationship can be expressed by considering the linear deviations around the nominal operating point.\n\\[\\tilde{\\Omega} = T_M \\tilde{\\delta}\\] 1.1.2 Transfer Function Model # With the state space model acquired for the actuation subsystem, it is possible to derive the transfer function.\n\\[G(s) = C(sI - A)^{-1}B \u0026#43; D\\] The relationship between the output (angular speed â€‹ \\(\\tilde{\\Omega}_i\\) ) and the input (applied voltage â€‹ \\(\\tilde{V}_{mi}\\) ) is expressed as the transfer function:\n\\[G(s) = \\frac{\\tilde{\\Omega}_i(s)}{\\tilde{V}_{mi}(s)} = \\begin{bmatrix} 0 \u0026amp; 1 \\end{bmatrix} \\begin{bmatrix} s \u0026#43; \\frac{R_m}{L_m} \u0026amp; \\frac{K_e}{L_m} \\\\ -\\frac{K_t}{J_m} \u0026amp; s \u0026#43; \\frac{2K_Q \\Omega_{i_o} \u0026#43; B_m}{J_m} \\end{bmatrix}^{-1} \\begin{bmatrix} 1 \\\\ \\frac{1}{L_m} \\\\ 0 \\\\ \\end{bmatrix}\\] When the aforementioned parameters are replaced with typical values for a DC motor, the resulting transfer function model can be represented.\n\\[G(s) = \\frac{4.901 \\times 10^6}{s^2 \u0026#43; 576.3s \u0026#43; 1.687 \\times 10^5}\\] 1.1.3 Stability # To assess stability, the system poles need computation, achievable through two approaches. First, by determining the roots of the denominator the defined transfer function G(s), or second, by computing the eigenvalues of matrix A as depicted as follows:\n\\[\\text{det}(sI - A) = s^2 \u0026#43; 576.3s \u0026#43; 1.687 \\times 10^5 = 0 \\quad \\Leftrightarrow \\quad s = -288.13 \\pm 292.67i \\quad (21)\\] The poles, located in the left half-plane and forming complex conjugates, signify system stability. Expect an overshoot with a step input. The unit step response demonstrates a small overshoot ( \\(M_p\\) = 4.54%) and rapid system response ( \\(T_s\\) = 0.15s). Consequently, approximating the actuation subsystem as a static gain seems plausible. The root locus plot confirms system stability across various proportional controllers.\n1.1.4 Controllability # The controllability of a state space model implies the capability to transition any initial state to a final state through a finite control action within a finite duration. This assurance exists when the rank of matrix C matches the dimension of the previously defined state vector, represented as n. For the actuation subsystem, n = 2, and matrix \\(\\mathcal{C}\\) is thus expressed as follows. Upon observation, it\u0026rsquo;s evident that C holds a rank of 2, affirming the system\u0026rsquo;s controllability.\n\\[\\mathcal{C} = [B \\quad AB] = \\begin{bmatrix} \\frac{1}{Lm} \u0026amp; -\\frac{Rm}{L^2m} \\\\ 0 \u0026amp; \\frac{Kt}{Jm Lm} \\\\ \\end{bmatrix}\\] 1.1.5 Observability # Observability of a state space model implies the ability to deduce any initial state from the system output within a given time interval. This certainty prevails when the rank of the observability matrix \\(\\mathcal{O}\\) matches the dimension of the state vector.\nGiven the state vector\u0026rsquo;s dimension as n = 2, the observability matrix \\(\\mathcal{O}\\) is defined according to equation 23. Upon inspection, it\u0026rsquo;s evident that the resulting matrix has a rank of 2, affirming the system\u0026rsquo;s observability.\n\\[\\mathcal{O} = \\begin{bmatrix} C \\\\ CA \\end{bmatrix} = \\begin{bmatrix} 0 \u0026amp; 1 \\\\ \\frac{K_t}{J_m} \u0026amp; -\\frac{B_m \u0026#43; 2K_q \\Omega_o}{J_m} \\\\ \\end{bmatrix} \\] 1.2 Movement Subsytem # To understand the movement subsystem, it\u0026rsquo;s crucial to pinpoint the forces and moments within the system. The forces and moments are generated by the combined angular speeds of the rotors, as shown below:\n\\[T_i = K_T \\Omega_i^2 \\] \\[Q_i = K_Q \\Omega_i^2 \\] \\[F_p = \\begin{bmatrix} 0 \\\\ 0 \\\\ - \\sum_{i=1}^{4} T_i \\\\ \\end{bmatrix}\\] \\[M_p = \\begin{bmatrix} b \\cdot \\cos(\\pi/4) \\cdot (T_1 - T_2 - T_3 \u0026#43; T_4) \\\\ b \\cdot \\cos(\\pi/4) \\cdot (T_1 \u0026#43; T_2 - T_3 - T_4) \\\\ -Q_1 \u0026#43; Q_2 - Q_3 \u0026#43; Q_4 \\\\ \\end{bmatrix}\\] The equations for the dynamics and kinematics are the following:\n\\[m\\dot{v} = -\\omega \\times mv \u0026#43; F_p \u0026#43; F_a \u0026#43; F_g \\\\ J\\dot{\\omega} = -\\omega \\times J\\omega \u0026#43; M_p \\\\ \\dot{p} = Rv\\\\ \\dot{\\Phi} = S\\omega\\] Considering the four angular velocities from the motors as inputs \\(\\tilde{u} = \\tilde{\\Omega} = [\\tilde{\\Omega}_1, \\tilde{\\Omega}_2, \\tilde{\\Omega}_3, \\tilde{\\Omega}_4]\\) and the twelve variables denoting both the linear and angular positions and velocities as the state \\(X = [\\tilde{v}^T, \\tilde{\\omega}^T, \\tilde{p}^T, \\tilde{\\Phi}^T]^T\\) , the model is then represented:\n\\[\\begin{bmatrix} \\dot{\\tilde{v}} \\\\ \\dot{\\tilde{\\omega}} \\\\ \\dot{\\tilde{p}} \\\\ \\dot{\\tilde{\\Phi}} \\\\ \\end{bmatrix} = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; A_V \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ I_3 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; I_3 \u0026amp; 0 \u0026amp; 0 \\\\ \\end{bmatrix} \\begin{bmatrix} \\tilde{v} \\\\ \\tilde{\\omega} \\\\ \\tilde{p} \\\\ \\tilde{\\Phi} \\\\ \\end{bmatrix} \u0026#43; \\begin{bmatrix} B_V \\\\ B_{\\omega} \\\\ 0 \\\\ 0 \\\\ \\end{bmatrix} \\tilde{\\Omega}\\] Where Av, Bv, BÏ‰ are given by:\n\\[A_V = \\begin{bmatrix} 0 \u0026amp; -g \u0026amp; 0 \\\\ g \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \\\\ \\end{bmatrix}, \\quad B_V = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ g \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ -b_z \u0026amp; -b_z \u0026amp; -b_z \u0026amp; -b_z \\\\ \\end{bmatrix}, \\quad B_{\\omega} = \\begin{bmatrix} 0 \u0026amp; -b_p \u0026amp; 0 \u0026amp; b_p \\\\ b_q \u0026amp; 0 \u0026amp; -b_q \u0026amp; 0 \\\\ -b_q \u0026amp; b_p \u0026amp; -b_p \u0026amp; b_p \\\\ \\end{bmatrix}\\] The coefficients for the matrix \\(B_V\\) and \\(B_{\\omega}\\) depend on the parameters of the quad rotor and flight conditions. But combining previous equations, it is obtained:\n\\[\\begin{bmatrix} \\dot{\\tilde{v}}_x \\\\ \\dot{\\tilde{v}}_y \\\\ \\dot{\\tilde{v}}_z \\\\ \\dot{\\tilde{\\omega}}_x \\\\ \\dot{\\tilde{\\omega}}_y \\\\ \\dot{\\tilde{\\omega}}_z \\\\ \\dot{\\tilde{p}}_x \\\\ \\dot{\\tilde{p}}_y \\\\ \\dot{\\tilde{p}}_z \\\\ \\dot{\\tilde{\\phi}} \\\\ \\dot{\\tilde{\\theta}} \\\\ \\dot{\\tilde{\\psi}} \\\\ \\end{bmatrix} = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; -g \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; g \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ \\end{bmatrix} \\begin{bmatrix} \\tilde{v}_x \\\\ \\tilde{v}_y \\\\ \\tilde{v}_z \\\\ \\tilde{\\omega}_x \\\\ \\tilde{\\omega}_y \\\\ \\tilde{\\omega}_z \\\\ \\tilde{p}_x \\\\ \\tilde{p}_y \\\\ \\tilde{p}_z \\\\ \\tilde{\\phi} \\\\ \\tilde{\\theta} \\\\ \\tilde{\\psi} \\\\ \\end{bmatrix} \u0026#43; \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ g \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ -bz \u0026amp; -bz \u0026amp; -bz \u0026amp; -bz \\\\ 0 \u0026amp; -bp \u0026amp; 0 \u0026amp; bp \\\\ bq \u0026amp; 0 \u0026amp; -bq \u0026amp; 0 \\\\ -bq \u0026amp; bp \u0026amp; -bp \u0026amp; bp \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ \\end{bmatrix} \\begin{bmatrix} \\tilde{\\Omega}_1 \\\\ \\tilde{\\Omega}_2 \\\\ \\tilde{\\Omega}_3 \\\\ \\tilde{\\Omega}_4 \\\\ \\end{bmatrix}\\] It is revelant to note that another possibility would be to divide the quad rotor dynamics into six subsystems, instead of a big matrix. Following up the state equation, the output would translate to:\n\\[y = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; I_3 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; I_3 \\\\ \\end{bmatrix} \\begin{bmatrix} \\tilde{v} \\\\ \\tilde{\\omega} \\\\ \\tilde{p} \\\\ \\tilde{\\Phi} \\\\ \\end{bmatrix} = \\begin{bmatrix} \\tilde{p} \\\\ \\tilde{\\Phi} \\\\ \\end{bmatrix}\\] Which would expand to:\n\\[\\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\ \\end{bmatrix} \\begin{bmatrix} \\tilde{v}_x \\\\ \\tilde{v}_y \\\\ \\tilde{v}_z \\\\ \\tilde{\\omega}_x \\\\ \\tilde{\\omega}_y \\\\ \\tilde{\\omega}_z \\\\ \\tilde{p}_x \\\\ \\tilde{p}_y \\\\ \\tilde{p}_z \\\\ \\tilde{\\phi} \\\\ \\tilde{\\theta} \\\\ \\tilde{\\psi} \\\\ \\end{bmatrix} =\\begin{bmatrix} \\tilde{p}_x \\\\ \\tilde{p}_y \\\\ \\tilde{p}_z \\\\ \\tilde{\\phi} \\\\ \\tilde{\\theta} \\\\ \\tilde{\\psi} \\\\ \\end{bmatrix}\\] 1.2.1 Simplification and Analysis # The analysis of the movement subsystem can be simplified by approximating the motor dynamics by a static gain. This means it is possible to change the matrix B such that the actuation variables \\(\\delta_i\\) becomes the inputs instead of the motor angular speeds \\(\\Omega_i\\) . This transformation is expressed:\n\\[\\dot{X} = AX \u0026#43; B\\tilde{\\Omega} = AX \u0026#43; BT_M \\tilde{\\delta}\\] The matrix \\(T_M\\) represents the voltage constant ( \\(K\\Omega\\) ) as depicted previously. This adjustment does not alter the subsequent analysis; it merely scales the inputs. However, this transformation proves valuable for future use when implementing a controller.\n1.2.2 Stability # The stability assessment involves determining the system\u0026rsquo;s poles, achieved by computing the eigenvalues of matrix A derived previously, encompassing the entire movement subsystem. Upon computation in Matlab, it reveals that all 12 eigenvalues, corresponding to the poles, are zero, indicating system instability.\n1.2.3 Controllability # In order to assess the controllability of a state space model, it is necessary to compute its controllability matrix. When considering the entire movement subsystem, the controllability matrix \\(\\mathcal{C}\\) is defined:\n\\[\\mathcal{C} = \\begin{bmatrix} B \u0026amp; AB \u0026amp; A^2B \u0026amp; A^3B \u0026amp; A^4B \u0026amp; A^5B \u0026amp; A^6B \u0026amp; A^7B \u0026amp; A^8B \u0026amp; A^9B \u0026amp; A^{10}B \u0026amp; A^{11}B \\end{bmatrix}\\] Upon conducting a rank computation of this matrix in Matlab, it is established that it holds a rank of 12. Consequently, indicating the controllability of the system.\n1.2.3 Observability # When assessing observability, the rank of the observability matrix \\(\\mathcal{O}\\) is computed. Considering the entirety of the movement subsystem, the matrix \\(\\mathcal{O}\\) is represented as:\n\\[\\mathcal{O} = \\begin{bmatrix} C \\\\ CA \\\\ \\vdots \\\\ CA^{11} \\\\ \\end{bmatrix}\\] This matrix has also rank 12 and, therefore, the system is observable.\n2 State Feedback Control # Previously, it was derived a model for the UAV, enabling to create linear and nonlinear simulators in Simulink. The next step is to implement a state feedback control system that allows the UAV to both follow and maintain a specified reference trajectory.\nTo effectively control the UAV, I aim to manage its lateral movement ( \\(P_N\\) and \\(P_E\\) ), vertical movement ( \\(P_D\\) ), and yaw angle ( \\(\\psi\\) ). Thus, it is needed an adjustment of the matrix C to exclusively capture these controlled states in the output. Consequently, the updated matrix C will be tailored to reflect only these specific states, ensuring the control system targets the intended dynamics.\n\\[C =\\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\ \\end{bmatrix}\\] Upon computing the resulting observability matrix, it was verified that its rank remained at 12, indicating the system\u0026rsquo;s sustained observability. Given the interest in tracking a specific reference while ensuring resilience against disturbances, a servo feedback system emerges as a promising choice. To achieve this, it necessitates employing the entire state vector in feedback, thereby requiring the ability to measure all 12 variables within the state vector. This measurement can be achieved through physical sensors or, alternatively, using observer techniques. For the current phase, it is assumed that reliable measurements of all system states are available.\nA servo feedback control system exhibits the structure illustrated onwards. To actualize this closed-loop configuration, the values of K and \\(K_i\\) need computation. This process commences by deriving the augmented open-loop system.\n\\[\\begin{bmatrix} \\dot{x}(t) \\\\ \\dot{x}_i(t) \\\\ \\end{bmatrix} = \\begin{bmatrix} A \u0026amp; 0 \\\\ -C \u0026amp; 0 \\\\ \\end{bmatrix} \\begin{bmatrix} x(t) \\\\ x_i(t) \\\\ \\end{bmatrix} \u0026#43; \\begin{bmatrix} B \\\\ 0 \\\\ \\end{bmatrix} u(t) \u0026#43; \\begin{bmatrix} 0 \\\\ 1 \\\\ \\end{bmatrix} r\\] \\[y(t) = \\begin{bmatrix} C \u0026amp; 0 \\\\ \\end{bmatrix} \\begin{bmatrix} x(t) \\\\ x_i(t) \\\\ \\end{bmatrix} \\bar{A} = \\begin{bmatrix} A \u0026amp; 0 \\\\ -C \u0026amp; 0 \\\\ \\end{bmatrix} , \\bar{B} = \\begin{bmatrix} B \\\\ 0 \\\\ \\end{bmatrix} , \\bar{C} = [C 0] \\] Based on the previously obtained model, \\(\\bar{A}\\) is a 16x16 matrix, \\(\\bar{B}\\) is a 16x4 matrix and \\(\\bar{C}\\) is a 4x16 matrix. The next step involves determining the gains K and \\(k_i\\) to design a controller ensuring the asymptotic stability of the system.\n\\[u(t) = - \\begin{bmatrix} K \u0026amp; k_i \\\\ \\end{bmatrix} \\begin{bmatrix} x(t) \\\\ x_i(t) \\\\ \\end{bmatrix} \\begin{bmatrix} \\dot{x}(t) \\\\ \\dot{x}_i(t) \\\\ \\end{bmatrix} =\\begin{bmatrix} A - BK \u0026amp; Bk_i \\\\ -C \u0026amp; 0 \\\\ \\end{bmatrix} \\begin{bmatrix} x(t) \\\\ x_i(t) \\\\ \\end{bmatrix} \u0026#43; \\begin{bmatrix} 0 \\\\ 1 \\\\ \\end{bmatrix} r\\] To determine the entries of K and \\(K_i\\) , selecting the desired new pole locations was conducted through a trial-and-error approach. The aim was to achieve a rapid response while minimizing oscillations and conserving actuator energy. After identifying the new pole locations, the computation of K and \\(K_i\\) was performed using the MATLAB function \u0026lsquo;place\u0026rsquo;, which generates a 4x16 matrix \\(\\bar{K}\\) enmpassing all the entries, from which a 4x12 matrix \\(\\bar{K}\\) and a 4x4 matrix \\(\\bar{K}_i\\) were subsequently derived.\n\\[\\bar{K} = [K | K_i]\\] The upcoming section will involve testing the behaviour of both the linear and nonlinear models when employing the acquired controller.\n3 Simulation Results # To assess system performance, two Simulink models were developed. The linear model represents the state-space model derived from a linearization that assumes a hovering condition where the drone\u0026rsquo;s weight is offset by the four propulsion forces. On the other hand, the nonlinear model, implements dynamic and kinematic equations alltogether.\nFollowing an iterative process, desired poles were obtained through trial and error. These poles were crucial for computing the K and \\(K_i\\) matrices, enabling the construction of a controller for both models. This controller transformed them into servo systems with state feedback control. This section focuses on analyzing the performance of the servo feedback control in both simulators, along with evaluating the controller\u0026rsquo;s robustness against disturbances.\nMATLAB Simulink: Linear Model - (click to expand) MATLAB Simulink: Non-linear Model - (click to expand) 3.1 Linear Model Results # As previously stated, the linear model was linearized under the assumption of a hovering state. In the forthcoming simulations, the model will undergo two combined movements: a vertical and yaw movement, as well as a vertical and lateral movement. Each simulation will present data on position, yaw angle, and actuation for the UAV.\n3.1.1 Vertical and Yaw Movement # Combining the vertical climb with a yaw movement is equivalent to introducing a negative P \\(D_{ref}\\) alongside a specified final yaw angle value \\(\\Psi_{ref}\\) .\nVertical and Yaw Movement: Movement of Z and Yaw - (click to expand) It illustrates the drone adeptly tracking the given references without encountering any noticeable issues. However, the next figure indicates a minimal, yet inconsequential impact on the lateral position ( \\(P_N\\) and \\(P_E\\) ), noted as exceedingly small ( \\(10^{-4}\\) ).\nVertical and Yaw Movement: Movement of X and Y - (click to expand) As anticipated, the activation of all four motors caused the UAV to ascend vertically. Notably, motors 1 and 3, as well as motors 2 and 4, exhibited varying actuations, leading to a variation in the yaw angle.\nVertical and Yaw Movement: Actuations - (click to expand) 3.1.1 Vertical and Lateral Movement # For the second movement, a decision was made to combine forward and vertical positioning for the drone. The following figure illustrates the UAV\u0026rsquo;s stabilization on the specified reference, although initial oscillations in the vertical position are evident. As predicted, the system eventually reaches the final position dictated by the reference, affirming the seamless functionality of the servo controller.\nVertical and Lateral Movement: Movement of X and Z - (click to expand) Additionally, the next figure indicates a minimal PE movement ( \\(10^{-3}\\) ), aligning with expectations.\nVertical and Lateral Movement: Movement of Y - (click to expand) The resulting actuation of the four motors can also be seen:\nVertical and Lateral Movement: Actuations - (click to expand) 3.2 Non-linear Model Results # The nonlinear model exhibited increased instability during testing compared to the linear model. Some simulations encountered errors due to numerical overflow, caused by large pitch and roll angles attempting to track references.\nThis instability arose from significant pitch or roll angles inducing high speeds, leading to the loss of lift forces from the propellers and the drone\u0026rsquo;s descent. To focus on testing the servo controller, smaller references were used. Alternatively, employing ramp-like references or smaller steps instead of large singular steps may mitigate extreme responses in the nonlinear model.\n3.2.1 Vertical and Yaw Movement # In this simulation, the given reference involves ascending while simultaneously rotating on the yaw angle. The upcoming figure illustrates the successful tracking of the reference without any issues.\nVertical and Yaw Movement: Movement of Z and yaw - (click to expand) Similar to observations in the linear model, there was a minor impact on the lateral position, as depicted:\nLateral Movement: Movement of X and Y - (click to expand) As anticipated, all motors were activated to elevate the altitude, with motors 2 and 4 exhibiting substantial actuation to align the yaw angle with the provided reference.\nVertical and Lateral Movement: Motor Actuations - (click to expand) 3.2.2 Vertical and Lateral Movement # In this scenario, the reference entails ascending while moving forward. It is shown the drone adeptly tracking the lateral reference, albeit with slight oscillations. However, despite stabilizing approximately 7 seconds later, the oscillations around the final altitude exceed acceptable limits.\nVertical and Lateral Movement: Movement of Z and X - (click to expand) Lateral Movement: Movement of Y - (click to expand) Vertical and Lateral Movement: Motor Actuations - (click to expand) Upon reviewing the actuation of the four motors, it\u0026rsquo;s evident that the actuation exhibited chaotic behaviour. This suggests that the controller values require correction and fine-tuning to enable smoother tracking of the provided reference, eliminating substantial oscillations.\n3.3 Robustness to Disturbances # In this section, the focus lies on evaluating the system\u0026rsquo;s response to disturbances. Specifically, the goal is to test its resilience against input disturbances. These disturbances entail unexpected alterations in the control action for select motors. This situation compels the servo control system to adapt and uphold the designated reference position and yaw angle.\nYaw Compensation - Motors 2 and 4 Altitude Compensation - All Motors "},{"id":6,"href":"/docs/2code/5od/_index2/","title":"Genetic Algorithm","section":"Evolutionary Computation","content":" Introduction # "},{"id":7,"href":"/docs/1design/2thermo/","title":"ThermoCup","section":"Design Portfolio","content":" ThermoCup # 1.1 What is the ThermoCup? # ThermoCup is a unique competition introduced initially at the Technical University of Lisbon during the MecanIST conferences in early 2016. Its primary objective is to challenge participants to conceive, design, and construct a steam boat. The competition covers a comprehensive spectrum of engineering aspects, incorporating various stages of the project lifecycle, from the initial conceptualization and design phase to the practical implementation, prototyping, and subsequent optimization processes.\n1.2 Transversal Disciplines # The challenges within ThermoCup likely encompass a range of engineering disciplines, including:\nMechanical Engineering: To design the physical structure of the steam boat, accounting for structural integrity and efficiency.\nThermal Engineering: Understanding and optimizing the heat transfer mechanisms involved in generating steam to power the boat.\nFluid Dynamics: Analyzing the flow of steam and water within the boat\u0026rsquo;s components to maximize propulsion and efficiency.\nComputational Modeling: Employing Ansys Fluent workbench for virtual simulations to predict and optimize the boat\u0026rsquo;s performance before physical construction.\n1.3 Initial Considerations # In the context of designing a steam boat for ThermoCup, the significance of defining boundary conditions and material selection cannot be overstated. These initial steps essentially set the groundwork for the entire project, exerting a profound influence on the boat\u0026rsquo;s performance and its eventual success in the competition.\nBoundary Conditions: Determining the environmental constraints, operational parameters, and physical limitations within which the steam boat will be mainly vital to perform CFD simulations. This includes factors such as the type of water body the boat will navigate, assumption of variations in temperature and pressure, and even limitations on the size and weight of the boat. In this case, it was intended to be an indoors competition - involving not so high velocities. Hence, mostly laminar flow, therefore a lot of simplifications were conducted to get a rough estimation of how each parameter would impact our results. However, accurately defining these boundary conditions allows participants to tailor their designs to suit real-world scenarios, ensuring the boat\u0026rsquo;s functionality under specific circumstances.\nMaterial Selection: The choice of materials for constructing the steam boat significantly impacts its structural integrity, weight, buoyancy, and overall performance. For instance, selecting lightweight yet durable materials for the boat\u0026rsquo;s structure can enhance its maneuverability and efficiency. Similarly, heat-resistant materials might be crucial for components exposed to high temperatures in the steam propulsion system.\nBut\u0026hellip;\nKeep in mind that the competition\u0026rsquo;s rules imposed caused certain constraints or guidelines regarding the materials that can be used, limitating creativity work to develop within those boundaries.\n1.4 Computational Fluid Dynamics # The utilization of Computational Fluid Dynamics (CFD) simulations with Ansys Fluent workbench within the ThermoCup competition marked a significant and intriguing facet of the event. Ansys Fluent is a robust software suite widely employed in engineering disciplines to simulate and analyze fluid flow, heat transfer, and associated phenomena in intricate detail.\nIn the context of ThermoCup, the incorporation of Ansys Fluent implied a multifaceted challenge for everyone beyond merely constructing a physical steam boat! It introduced a dimension where participants leverage advanced virtual simulations to iteratively refine their designs and optimize the performance of their boats via:\nVirtual Prototyping Performance Optimization Predictive Analysis Surely using machine learning tools this could have been more efficient, but for that moment it yielded good results!\n1.5 Our Solution # Attempts 1 Attempts 2 Attempts ALL After countless combinations of material and design, the choice of cork as the structural material for the steam boat in the ThermoCup competition seemed to have been a well-considered decision. Cork is known for its buoyant and lightweight properties (refer to previous Ch.2), and its higher density compared to materials like polystyrene likely provided the necessary weight and structural stability for the boat. This was especially important when simulating the boat\u0026rsquo;s performance under the natural conditions of flow, which can be challenging at higher speeds due to introduced turbulence flow and higher hydrodynamic forces, including drag and lift that can lead to steer off course as it interacts with the surrounding water.\n1.6 Outlook # \\[v_{\\text{km/h}} = \\frac{8}{18.9} \\times 3.6 \\approx 1.53\\text{ km/h}\\] Securing 3rd place in the competition, covering an 8-meter water lane in just 18.9 seconds, while achieving a average speed of 1.53 km/h, is a notable result. While it is not perfect, it compromised diverse engineering problem-solving skills between meticulous material selection and thoughtful design considerations by the team.\n"},{"id":8,"href":"/docs/2code/3sint/","title":"Deep Learning on Fake News","section":"Coding Portfolio","content":" Language Features for Detection of Fake News # 1.1 A Growing Case # Fake news, a term emblematic of fabricated information intentionally disseminated across traditional news outlets or online social platforms, embodies deliberate disinformation strategies. These falsehoods aim to tarnish individuals, entities, or gain financial or political advantages, often employing misleading, attention-grabbing headlines. Some counterfeit news pieces disguise themselves as satirical content, sounding incredulous to the point of absurdity, yet managing to deceive unsuspecting audiences.\nThe proliferation of digital media and social networks has led to a rampant increase in fake news dissemination, presenting a contemporary societal challenge. Misinformation, with its potential to adversely impact lives, demands the crucial ability to differentiate between genuine and counterfeit news. This task is intricate; genuine news might appear implausible to the average reader, while fake news endeavours to appear credible.\nAddressing this contemporary issue involves the automatic identification and prevention of fake news dissemination. Efforts by digital corporations and journalistic agencies have attempted to combat fake news, but these solutions have shown imperfections. Academic research has delved into understanding the propagation of fake news, recognizing language usage as a vital parameter in these investigations.\nStudies such as those by Mahyoob in his paper titled \u0026ldquo;Linguistic-Based Detection of Fake News in Social Media\u0026rdquo; and by Preston \u0026ldquo;Detecting fake news on Facebook: The role of emotional intelligence\u0026rdquo; shed light on the analysis of language characteristics in detecting fake news, providing insights, particularly for this application within the context of Portuguese news.\nAdditionally, reports by Facebook and FactCheck.org detail the challenges and strategies in combatting misinformation, emphasizing the significance of linguistic analysis in verifying news authenticity.\nIn this project, drawing upon a meticulously curated corpus comprising 3600 true and 3600 fake Portuguese news samples, collected from January 2016 to January 2018, I aimed to automatically identify fake news using aforementioned language characteristics. This endeavour relied on analyzing 21 specific language traits meticulously classified by the corpus\u0026rsquo; authors to transform news articles into metadata, aligning with methodologies outlined by academic works and industry efforts in the field.\nThe goal of this project is to utilize established machine learning techniques, as previously outlined in research by Mahyoob and Preston, employing each language characteristic as a metadata feature, to effectively identify and mitigate the spread of fake news within Portuguese-language news sources.\n1.2 Approach Brainstorming # Following the problem description, there are 21 features to be analyzed:\nFeatures (click to expand) Number Feature 1 number of tokens 2 number of words without punctuation 3 number of types 4 number of links inside the news 5 number of words in upper case 6 number of verbs 7 number of subjunctive and imperative verbs 8 number of nouns 9 number of adjectives 10 number of adverbs 11 number of modal verbs (mainly auxiliary verbs) 12 number of singular first and second personal pronouns 13 number of plural first personal pronouns 14 number of pronouns 15 pausality 16 number of characters 17 average sentence length 18 average word length 19 percentage of news with spelling errors 20 emotiveness 21 diversity The initial step towards obtaining meaningful results involves preprocessing the available data. Determining which features to utilize for further division into training and testing sets was a crucial decision point, expounded upon in the following section. How were these features selected?\nA thorough study was conducted employing statistical methods to assess the variability within each feature\u0026rsquo;s dataset. Features demonstrating minimal variation, essentially stagnant in their values, were deemed non-contributory and subsequently excluded. Once these less informative features were removed, attention shifted to observing how these features varied between fake and true news samples. Four specific linguistic features were ultimately chosen, drawing from both statistical analysis and intuitive considerations.\nTwo distinct datasets were created: one encompassing all 21 features and another featuring only the selected linguistic features. Throughout the project, these sets were compared, and the resultant differences were discussed. It was anticipated that utilizing a mere four features, compared to the full 21, might yield inferior outcomes due to the reduced dataset facilitating the differentiation between fake and genuine news.\nConsideration for computational resources remained pivotal. The project emphasized optimizing computational efficiency, recognizing that certain models, such as clustering or neural networks, could demand substantial computation power. Maintaining a balance between model complexity and computational demand was crucial. Efficiency was prioritized without compromising noticeable accuracy outcomes.\nFinally, acknowledging the variance in model results across simulations and the potential for parameter customization, efforts focused on identifying optimal parameter values for maximizing accuracy within each model. This iterative approach aimed to fine-tune model parameters for improved performance, considering the inherent variability in results across different simulations.\n1.3 Data Preprocessing # The dataset utilized in this project originated from the \u0026ldquo;Fake.Br Corpus\u0026rdquo; directly available at Roney Santos\u0026rsquo; github page specifically curated to encompass both true and false news in Brazilian Portuguese.\nThis corpus originally contained complete news articles. However, the focus narrowed down to extract the essential features embedded within each news piece. All data was initially formatted in .txt files, necessitating the development of a MATLAB script to convert it into a more manageable .mat format.\n# Preprocessing data # N = number of news N = 1:3602 # Remove news that for some reason don\u0026#39;t exist N(697) = [] N(1467) = [] for i in N: # metaInputs will be the input for the models # importfile opens the txt files and saves them as mat variables # metaInputsTrue[:,i] = importfile(sprintf(\u0026#39;%d-meta.txt\u0026#39;,i)) metaInputsFake[:,i] = importfile(sprintf(\u0026#39;%d-meta.txt\u0026#39;,i)) # metaTargets will be the targets of the neural network # metaTargetsTrue[:,i] = [1, 0] metaTargetsFake[:,i] = [0, 1] metaInputs = [metaInputsTrue metaInputsFake] metaTargets = [metaTargetsTrue metaTargetsFake] As it is seen, this transformation yielded two primary files: \u0026lsquo;metaInputs.mat,\u0026rsquo; housing parameters for all news articles, and \u0026lsquo;metaTargets.mat,\u0026rsquo; distinguishing true news (indicated by a \u0026lsquo;1\u0026rsquo; in the first row) from false news (marked with a \u0026lsquo;0\u0026rsquo; in the second row). To simplify navigation, a structural layout was adopted: the first half of the parameter files consistently represented true news, while the subsequent half constituted false news. This deliberate arrangement facilitated easier comprehension through the interpretation of variables and generated plots.\nThe dataset underwent a division into training and validation subsets. Employing a random selection method, 75% of the dataset was allocated for model training, while the remaining 25% served as a validation set.\nAnalyzing the pivotal features responsible for differentiating between authentic and deceptive news involved employing various statistical methods such as \u0026lsquo;corrplot,\u0026rsquo; \u0026lsquo;matrixplot,\u0026rsquo; and \u0026lsquo;boxplot\u0026rsquo;. However, the outcomes indicated that many features exhibited high non-linearity, posing a challenge in extracting meaningful correlations and insights.\nThe only meaningful contribution came from the Boxplot.py Python function given its concise visualization using key statistics like the minimum, quartiles, median, and maximum values, providing insights into data distribution. It efficiently identifies outliers, assesses symmetry, measures data clustering, and detects potential skewness in the dataset.\n1.4 Methodology # Previously, all methods were initially applied to the entire set of features, followed by a re-execution using only the linguistic features for comparison. This approach aimed to gauge the potential trade-off between accuracy and computational efficiency, as eliminating numerous features could expedite processing time. Moreover, the objective shifted from merely identifying blatantly obvious fake news (e.g., those with poor punctuation or grammar) to developing a model adept at detecting less instances of misinformation, as indicated by the selected linguistic features.\n1.4.1 Clustering # The clustering classification method involves creating distinct clusters based on the available features and assigning each cluster a class label, distinguishing between true and fake news.\nTwo types of clustering techniques, fuzzy c-means and k-means clustering, were employed. Crisp clustering algorithms allocate each data point to a single cluster based on quantified similarity, while fuzzy clustering allows varying degrees of membership to multiple clusters, reflecting diverse similarities.\nDetermining the optimal number of clusters was an initial consideration. Initially, there was a belief that higher cluster counts might yield better results, supported by a MATLAB function \u0026rsquo;evalclusters\u0026rsquo;. However, a comprehensive study later revealed this wasn\u0026rsquo;t always the case.\nCommencing with K-Means clustering, an algorithm using centroids and distance metrics, data points are associated with the nearest centroid, often calculated using squared Euclidean distances.\nK-means clustering partitions observations into sets to minimize the within-cluster sum of squares. The objective function minimizes the variance by grouping observations into clusters.\n\\[\\text{Cost Function} = \\text{argmin}_S k \\sum_{i=1}^{k} \\sum_{x \\in S_i} \\| x - \\mu_i \\|_2^2 = \\text{argmin}_S k \\sum_{i=1}^{k} |S_i| \\text{Var}(S_i)\\] Variables Description for K-means clustering (click to expand) S denotes the set of clusters. k represents the number of clusters. x is a data point. \\mu_i signifies the centroid associated with cluster i. S_i indicates the i^{th} cluster. Var(S_i) represents the variance of cluster i. Identifying clusters containing fake news varied across simulations due to differing cluster numbering. To resolve this, the mode was employed to determine the cluster with the most data points, logically corresponding to fake news, given an equal split between true and fake data points.\nSubsequently, fuzzy c-means clustering was executed, allowing data points to belong to multiple clusters with varying degrees of membership. Parameters such as the initial number of clusters \u0026lsquo;c\u0026rsquo; and the exponent controlling fuzzy overlap \u0026rsquo;m\u0026rsquo; were fine-tuned to optimize accuracy.\nThe FCM algorithm partitions a collection of data into fuzzy clusters, returning cluster centers and a partition matrix indicating each data point\u0026rsquo;s degree of belonging to clusters.\n\\[\\text{Cost Function} = \\text{argmin}_C \\sum_{i=1}^{n} \\sum_{i=1}^{c} w_{ij}^m \\| x_i - c_j \\|_2^2\\] Variables Description for FCM clustering (click to expand) C signifies the collection of clusters. n represents the number of data elements. c denotes the number of fuzzy clusters. x_i represents a data point. c_j signifies the j^{th} cluster center. w_{ij} represents the degree to which x_i belongs to cluster j. m represents the fuzzifier controlling cluster fuzziness. Both FCM and k-means aim to minimize objective functions; however, the addition of membership values and the fuzzifier parameter in FCM allows for fuzzier clustering. The fuzzifier \u0026rsquo;m\u0026rsquo; determines the level of cluster fuzziness, with larger \u0026rsquo;m\u0026rsquo; values resulting in fuzzier clusters, while \u0026rsquo;m=1\u0026rsquo; implies crisp partitioning.\nStudy: Evaluation of exponent \u0026rsquo;m\u0026rsquo; for all features and linguistic features (click to expand) The observed trend indicates that the peak accuracy aligns with the lowest exponent value of \u0026rsquo;m,\u0026rsquo; typically slightly above one unit. Moreover, as the value of \u0026rsquo;m\u0026rsquo; increases, there is an observable exponential decrease in accuracy.\nApplying clustering to linguistic features followed a similar process. The analysis revealed a maximum accuracy of 87.51% concerning the exponent value.\n1.4.2 Fuzzy Modelling # Fuzzy modeling uses rules that are like \u0026ldquo;if-then\u0026rdquo; statements in everyday language. These rules connect input to output in systems that work with vague or uncertain information. There are two main types of rules: one that\u0026rsquo;s easier for people to understand and gives fuzzy (not exact) outputs, and another that\u0026rsquo;s more mathematical, precise, and better for complex systems.\nTo make a fuzzy system, you start by grouping similar data together, allowing for some overlap between the groups. There are different ways to do this grouping. The number of groups usually matches the number of rules used in the system.\nIn these systems, the choice of rules affects how well they work for different tasks. Considering these differences, one type of rule, the Takagi-Sugeno model, was chosen for a specific case because it\u0026rsquo;s better suited for complex systems and provides precise outputs.\nExample: Car\u0026rsquo;s adaptive cruise control system with fuzzy logic - (click to expand) If the distance to the car in front is relatively close and the speed is moderately high, then reduce acceleration slightly. If the distance to the car in front is quite far and the speed is low, then increase acceleration moderately. In this scenario, fuzzy logic allows the system to interpret vague terms like \u0026ldquo;relatively close\u0026rdquo; or \u0026ldquo;quite far\u0026rdquo; regarding the distance to the car ahead. If the system were based on the Takagi-Sugeno model, it would precisely adjust acceleration based on these conditions, ensuring smoother driving and safer distance management. In setting up the fuzzy model, the threshold for the membership function was carefully selected to prioritize minimizing false negatives over false positives. This choice aimed to err on the side of categorizing genuine news as potentially fake rather than labeling false news as true. To pinpoint the most effective threshold value, a dedicated function was designed to identify the optimal point that maximizes the model\u0026rsquo;s accuracy. Across various simulations, this optimal threshold typically fell between 0.45 and 0.55.\nLet\u0026rsquo;s assume an ideal threshold of 0.51: a visual representation illustrates this point. News pieces with a membership value above 0.51 were classified as true (shown above the black lines), while those below were categorized as fake.\nIt was previously mentioned that increasing the number of clusters might not always lead to higher accuracy in Fuzzy Modeling. To confirm this, a study was conducted to explore the relationship between accuracy and the number of clusters.\nStudy: Impact of numbers of clusters on the model\u0026rsquo;s accuracy - (click to expand) For all features:\nFor linguistic features:\nWhile an increase in clusters appears to enhance the overall consistency of average maximum accuracy, an interesting observation arises. In the simulation involving the highest number of clusters (represented as the last point), the resulting accuracy doesn\u0026rsquo;t perfectly align with the maximum accuracy achieved. Considering that all features were utilized to attain this result, and the accuracy was already quite satisfactory, the differences among the increasing clusters aren\u0026rsquo;t distinctly noticeable.\nFor in-depth study, extracting the membership functions for each features could be done by consulting Fuzzy Modeling and Identification Toolbox fm2tex function\n1.4.3 Artifficial Neural Networks # Background: What are Artifficial Neural Networks and how do they work? - (click to expand) Artificial Neural Networks (ANNs) were initially inspired by the human brain\u0026rsquo;s structure to handle tasks where traditional algorithms struggled. To implement an effective ANN, understanding how it predicts various inputs, its associated phases, and its adaptability to new, unknown inputs is crucial.\nA Multilayer Perceptron (MLP) is a type of feedforward ANN composed of an input layer, a hidden layer, and an output layer. The hidden and output layers consist of nonlinear activation function-equipped neurons. Unlike linear perceptrons, MLPs employ supervised learning, specifically the backpropagation technique, allowing them to handle non-linear data by adjusting node biases and connection weights.\nDuring training, the network adjusts biases and weights via backpropagation to compute output values using input weights and activation functions. To compute weight adjustments (Î´w_ij), the network calculates the gradient of the Mean Squared Error (MSE) cost function and multiplies it by a learning rate (Î±).\nValidation ensures the network\u0026rsquo;s performance by comparing computed and known outputs, detecting overfitting. Testing evaluates the fully trained network using a separate set of examples.\nThe pattern recognition neural network chosen aims to classify news as true or fake based on news parameters. Data partitioned for training (70%), validation (5%), and testing (25%) using dividerand function. Mean Squared Error as the cost function was preferred over Mean Absolute Error due to its suitability for situations where large errors are undesirable.\nVarious training methods exist, with factors like problem type, network size, and memory influencing selection. For this project, Levenberg-Marquardt (LM) algorithm was chosen due to its robustness and standard usage for pattern recognition problems.\nThe activation function \u0026rsquo;tansig\u0026rsquo; (hyperbolic tangent sigmoid) was utilized for neurons to ensure smooth activation, less computation demand, and easier weight learning, aligning well with the LM algorithm.\nThe number of neurons in the hidden layer was also left to the userâ€™s choice, it was varied between 5, 10 and 15 neurons.\nLayers \u0026amp; Neurons All Features Linguistic Features [ 5 ] 96.7% 89.1% [ 10 ] 96.5% 89.1% [ 15 ] 96.5% 89.3% [2 2] 96.8% 88.7% [5 5] 96.6% 89.0% [10 10] 96.8% 89.0% [2 2 2] 96.7% 88.7% [4 4 4] 96.7% 88.6% [6 6 6] 96.6% 88.6% [2 2 2 2] 96.8% 88.8% [4 4 4 4] 96.8% 88.7% 1.5 Outcomes # Study: Confusion matrices results - (click to expand) Using the available function in MATLAB and Python to retrieve the confusion matrices, it was possible to study certain parameters such as accuracy.\n(I will expand a bit more when I have time!)\n1.5.1 Results Interpretation # After generating the confusion matrix plots, a comprehensive table was compiled to encompass all available accuracy metrics.\nModel Methods ANN T-S FIS FCM KM All Features Accuracy 97.3% 95.9% 94.1% 94.1% All Features True Positive 96.6% 93.8% 93.3% 93.3% All Features False Positive 2.9% 1.9% 5.2% 5.2% Linguistic Features Accuracy 89.0% 87.6% 87.1% 87.0% Linguistic Features True Positive 86.7% 85.8% 89.2% 89.1% Linguistic Features False Positive 8.8% 10.5% 15.1% 15.2% Upon reviewing the results from the testing set, the anticipated hierarchy of performance among models held true: neural networks outperformed fuzzy models, which, in turn, surpassed clustering methods. The accuracies obtained for all features were as follows: Artificial Neural Network (ANN) at 97.3%, Takagi-Sugeno Fuzzy Inference System (T-S FIS) at 95.9%, Fuzzy Clustering Means (FCM) at 94.1%, and K-Means (KM) also at 94.1%. As expected, the use of only linguistic features resulted in lower accuracies due to fewer comparison terms.\nObserving the performance on training versus testing sets revealed slight overfitting in the NN and T-S FIS models, showcasing approximately 1% higher accuracy in the training set. To address this issue, augmenting the dataset and employing regularization techniques could enhance model generalization, ensuring better learning of patterns from the training data.\nInterestingly, FCM and KM showed closely aligned results, especially with linguistic features where they were identical. Altering the exponent for the fuzzy partition matrix could prompt FCM to converge towards KM values.\nAll methods exhibited accuracies exceeding 94% when using all features, indicating proficient performance in categorizing news. This implies that out of 7200 news pieces, more than 6760 were accurately identified based on their features, with the highest accuracy of 97.3% signaling misclassification of only about 200 news articles.\nUsing solely linguistic features yielded satisfactory results, with all methods achieving accuracy equal to or greater than 87%. This indicates that, among 7200 news items, more than 6264 were correctly categorized based on their features. However, the highest accuracy of 89.1% suggested misidentification of 784 news articles.\nIt\u0026rsquo;s noteworthy that employing a vast number of clusters significantly escalates computational demands. Balancing computational efficiency against marginal performance improvements is crucial, as extended computation time might not necessarily yield substantial enhancements in results.\n1.5.2 My Thoughts on Applying Machine Learning for Fake News Detections # Wrapping things up, the ANN, T-S FIS, C-M, and K-M methods all delivered pretty solid outcomes, with the ANN standing out as the star performer here.\nSure, the accuracy obtained was good enough for the work performed, but in the real world, aiming for near-perfect accuracyâ€”like nudging towards that 100% markâ€”holds serious weight. Think about it, labeling something as fake when it\u0026rsquo;s not, or the other way around, carries hefty ethical, legal, and economic implications.\nBoosting accuracy is a puzzle. Tweaking model parameters or even experimenting with more clusters might help, but there\u0026rsquo;s a catchâ€”those simulations could drag on forever. Another trick is amping up the features, like diving into the writing style or digging into the website URL to suss out if the source is trustworthy. But beware, piling up features might lead to overfitting headaches.\nI could\u0026rsquo;ve explored different models too; who knows, they might\u0026rsquo;ve bumped up the accuracy. Or, here\u0026rsquo;s a thought: splitting news by their subject could\u0026rsquo;ve been a game-changer. I mean, the language in political news can be totally different from religious or society-related stuff.\nHere\u0026rsquo;s the kicker though: who\u0026rsquo;s the big shot deciding if an article\u0026rsquo;s legit or not? Right now, it\u0026rsquo;s mostly on the audience to figure that out. But can we really rely solely on them to spot the good from the bad? Food for thought, right?\n"},{"id":9,"href":"/docs/2code/1drone/_index3/","title":"Drone Controller Design Pt. 1","section":"RedBull Racing Competition","content":" Controller Design Pt. 1 # 1 # "},{"id":10,"href":"/docs/1design/3pmec/","title":"Mechanical Design","section":"Design Portfolio","content":" 1 Double Girder Crane for Industrial Application # 1.1. Description and Context # This project was carried out within the scope of the Mechanical Design Course, part of my M.Sc journey. It aims to dimension and study fundamental structural components of a double girder suspension crane. Bridge cranes are frequently used equipment in the industry, especially in metallurgy, playing a pivotal role and being deployable both indoors and outdoors. A bridge crane is a piece of equipment that, despite not being highly complex, encompasses all the elements that warrant study, allowing for the application of theoretical concepts applied to a real-world scenario.\n1.2. Goals # This project aims to conduct the dimensioning and study of fundamental structural components. The sizing will be executed in accordance with applicable standards and demonstrated through analytical calculations and finite element models. In addition to the structural elements of the equipment, fundamental mechanical components of the system, including welded and bolted connections, will also be sized. Coupled with the dimensioning aspect is the economic factor, aiming to minimize costs while ensuring the safety of the entire structure\n1.3. Function, Description, and Operation of the Mechanism # Bridge cranes are used for lifting and moving heavy loads. The structural and mechanical components to be sized are:\nResistant girders, consisting of a reinforced box profile; Trolley frame; Trolley shaft; Driving and driven wheels; The selected structural and mechanical components are:\nHoist trolley; Bearings; Gear motor. Main components:\nThe trolley frame is located at the ends of the resistant girders. Inside it, the mechanism for the crane\u0026rsquo;s movement is situated, powered by a gear motor. The wheels move along tracks, following well-defined paths. Resistant girders are crucial structural components in this type of equipment. They are the elements that endure the most stress caused by the weight of the load being transported. The hoist trolley has a translational motion along the resistant girders, allowing for the transport of the load perpendicular to the crane\u0026rsquo;s direction of movement. It facilitates the lifting of the load to be transported. In Portuguese: Main components of a double girder crane - (click to expand) 1.4. Design Specifications # 1.4.1. Design Requirements # The following requirements were considered for this project:\nNominal load of 8 tons; Span between wheels of 10 meters; Workshop environment; Operating temperatures between 0 and 40 degrees Celsius; 8 hours of operation per day; Maximum translation speed of 25 m/min. 1.4.2. Project Constraints # The decision was made to design a bridge crane for an enclosed environment. 1.5. Standards, Codes, and Regulations # In the completion of this work, the FEM Standards (European Federation of Materials Handling), particularly Chapter II, and Eurocode 3 were utilized. The FEM standards address specific issues related to structures and handling equipment, including cases such as bridge cranes and gantry cranes.\n1.6. Approach # A study was conducted on various existing construction solutions available in the market for this type of equipment. For the girders, a box-type section was chosen with a constant thickness of 10mm, made of AISI 1095 steel, and measuring 10m in length. These girders consist of 4 steel plates welded together with a 5mm thick welding bead. The rails are positioned on the girders, not aligned with the vertical plane passing through the girder\u0026rsquo;s centroid, as this alignment would create a high bending moment on the upper plate of the girder. The connection between the girders and the trolley frame is established using 6 bolts M36x4 CR 10.9 and welding with a 10mm thick bead.\nThe chosen hoist trolley is the STAHL - SH 5020, which has a wheelbase of 1m and a mass of 755 kg. The following data pertains to the assembly composed of the two girders, two trolley frames, and the hoist trolley:\nWeight: 1229.3 kg Maximum width: 3.4 m Maximum length: 10.14 m 1.7. Manufacturing and Assembly Processes # The steel plates are obtained through a cold rolling process. Their surface roughness with an arithmetic mean deviation is 4.8 micrometers. The geometric tolerance concerning the thickness of these components is \\(\\pm\\) 0.1 mm.\nFor the resistant girders:\nWelding of the two web plates to the bottom flange. Welding of the internal transverse reinforcements. The end reinforcements of the girder, which will function as covers, will be welded in a manner that the welding beads remain inside the girder. Welding of the top flange. Welding of the rail. Welding of the lateral reinforcements. Welding of the base fixing. The welding for the first, third, and fourth steps will be conducted using the Submerged Arc Welding process. This method is advantageous due to the substantial length of the welding bead, allowing for automation of the equipment carrying out the operation. The welding for the remaining steps will be executed using TIG (Tungsten Inert Gas) welding. The required equipment will be operated by a skilled worker.\n1.8. Costs # The price of AISI 1095 Q\u0026amp;T steel is approximately â‚¬1/kg. Considering the girders weigh around 346.6 kg, their cost will be approximately â‚¬346.6. The labor cost is around â‚¬9/m, and the analyzed structure totals 53.2m, amounting to approximately â‚¬478.8.\n1.9. General Simplifications # Only the main components were designed, namely the girders. The trolley frames and the remaining support structure were not designed. The studied overhead crane was interior, simplifying the analysis, as exterior conditions would introduce wind forces. For the sizing, it was considered that the hoist trolley was positioned in the middle of the girders (longitudinally), as this situation causes the greatest deformations.\n2 Calculations # 2.1. Material # Due to the high stresses to which the box girder of the overhead crane is subjected, it\u0026rsquo;s necessary to select a structural steel with considerable yield strength to ensure the component meets service conditions and to minimize stress concentration and fatigue issues. With this in mind, the following steel with a tempering and tempering treatment was chosen:\nS_u S_y E G \\nu 1210 MPa 772 MPa 210 GPa 81 GPa 0.3 2.2. Dimensioning Criteria # 2.2.1. Rigidity Criterion # The box girders, with a length of 10 m, must meet this criterion from EN 1993-6:2007, where the maximum allowable deflection is given by:\n\\[ \\delta_{z,max} = \\frac{L}{600} = 16.7 \\text{mm} \\] To meet this criterion, an initial H/L ratio of 2.2 was chosen.\n2.2.2. Mechanical Strength Criterion # The mechanical strength criterion was defined using the Pugsley criterion with the specified coefficients n = 2,08.\n2.3. Beam Sizing # 2.3.1. Static Verification # To size the beam, an analytical model was developed considering two vertical loads corresponding to the nominal load and the weight of the trolley. The value of each of these two forces was previously defined according to the FEM standards, already multiplied by the dynamic coefficient and the amplification coefficient. The value of each force is 26.7 kN and they are spaced 1 meter apart. Additionally, the weight of the beam itself, which is not negligible, is represented as a distributed load. To verify the stiffness criterion, an H/L ratio of 2.2 was initially chosen. Using tables of maximum deflection, employing the superposition method and also considering the load P equivalent to 26700N and the load application point (offset) at x = 4.5 m, the following expression for the beam\u0026rsquo;s maximum deflection is obtained:\n\\[y_{\\text{max}} = 2 \\left[ \\left( \\frac{P \\times b}{6 \\times E \\times I_z \\times 10} \\right) \\times \\left( \\left( 5^3 - \\left( 10^2 - b^2 \\right) \\times 5 \\right) \\right) - \\frac{5 \\times w \\times 10^4}{384 \\times E \\times I} \\right] \\] Next, an expression for a given moment of inertia around z, Iz, was obtained as a function of the section\u0026rsquo;s height H.\n\\[ I_z = \\frac{2}{10^{12}} \\left[\\left(10 \\times (2H - 20)^3\\right) \u0026#43; \\left({2L \\times 10^3}\\right)\\right] \u0026#43; 10L(H - 5)^2 \\] The distributed loading, w, was defined using the density of the chosen material ( \\(\\rho\\) ) = 78450 N/ \\(m^3\\) :\n\\[w = \\frac{Volume \\times \\rho}{L} = 4.564H - 31.38\\] Upon solving the equation for maximum deflection, an expression in terms of H was obtained. From the graph, a value of H = 260 mm was selected, corresponding to L = 118.2 mm, thereby fulfilling the rigidity criterion.\nAt present, the computation of the Von Mises equivalent stress has become feasible. This involves determining both the shear stress resulting from torsion and the shear stress attributed to it.\n\\[\\tau_V = \\frac{V \\times Q}{I_z \\times b} = \\frac{27170 \\times 2 \\times (0.125 \\times 0.0025 \u0026#43; 0.255 \\times 0.0023)}{0.00052 \\times 0.02} = 3.234 \\times 10^6 \\text{Pa} \\\\ \\\\ \\tau_T = \\frac{T}{2 \\times A_m \\times t} = \\frac{2250 \\times 2}{2 \\times (0.1664 \\times 0.510) \\times 0.1} = 2.651 \\times 10^6 \\text{Pa} \\\\ \\\\ \\sigma_M = \\frac{M_c}{I_z} = \\frac{131660 \\times 0.26}{0.00052} = 6.637 \\times 10^7 \\text{Pa} \\\\\\] Subsequently:\n\\[\\sigma_{VM} = \\sqrt{\\sigma_M^2 \u0026#43; 3\\left(\\tau_V^2 \u0026#43; \\tau_T^2\\right)} = 6.723 \\times 10^7 \\text{Pa}\\] Having the safety factor:\n\\[n = \\frac{S_y}{\\sigma_{VM}} = \\frac{772 \\times 10^6}{6.723 \\times 10^7} = 11.482 \u0026gt; 2.08\\] 2.3.2. Fatigue Verification # The minimum stress is determined by the weight of the beam and the winch car itself (considering the winch car unloaded). Conversely, when the winch car is loaded (the scenario considered for calculating the static safety factor), the corresponding stress will be at its maximum. We can derive the ratio between the minimum and maximum stresses by calculating the minimum stress for the unloaded car. Repeating this process for the calculation of the Von Mises stress for the unloaded load case yields.\n\\[R = \\frac{\\sigma_{VM_0}}{\\sigma_{VM}} = \\frac{1.106 \\times 10^7}{6.723 \\times 10^7} = 0.1645\\] The fatigue limit stress was determined to be 321.617 MPa through the calculation of Marin\u0026rsquo;s factors.\n\\[n_{Goodman} = \\frac{1}{\\frac{\\sigma_a}{S_e} \u0026#43; \\frac{\\sigma_m}{S_u}} = 8.355\\\\ \\\\ n_{Yield} = \\frac{1}{\\frac{\\sigma_a \u0026#43; \\sigma_m}{S_y}} = 11.482\\\\\\] For a 25% overload (1.25 times the load) occurring 10% of the time and taking a factor of f = 0.858 figure 6-18 of Shigley\u0026rsquo;s Mechanical Design book\n\\[\\sigma = \\frac{1.25 \\times \\sigma_a}{1 - \\frac{1.25 \\times \\sigma_m}{S_{ut} \\times 10^6}} = 3.51 \\times 10^7 \\, \\text{Pa}\\] \\[a = \\frac{(f \\times S_{ut})^2}{S_e \\times 10^6} = 3.35 \\times 10^9\\] \\[b = -\\frac{1}{3} \\times \\log \\left( \\frac{f \\times S_{ut}}{S_e \\times 10^6} \\right) = -0.391\\] \\[\\text{Cycles} = \\left( \\frac{\\sigma}{a} \\right)^\\frac{1}{b} = 1.17 \\times 10^5 \\text{cycles}\\] 2.4. Finite Element Analysis # 2.4.1. Beam Analysis # For the analysis of the resilient beam using finite element methods, the commercial software Solidworks was employed. The numerical model comprises a simply supported beam on the two hinges of the plate to be bolted to the winch\u0026rsquo;s head, with a load of 27.6 kN applied at the geometric location where the winch car wheels would be. The beam\u0026rsquo;s self-weight is also considered.\nIn terms of the developed stresses, at the neutral axis (which in this case is the centroidal axis), the Von Mises equivalent stress is zero or close to zero, as expected. It is also inferred that the highest stresses exist at the outermost fibers of the section, where there is a maximum tensile stress in the lower outer fiber and a compressive stress in the upper outer fiber.\nBoth these stresses are considerably lower than the material\u0026rsquo;s yield stress, ensuring the specified safety factor.\nThe maximum deflection due to loading measures 9.584 mm and is positioned at the midpoint of the beam span. Comparing this with the analytically obtained deflection of 11.5 mm, there is a relative error of 16.7%. This error arises from the consideration of internal reinforcements within the beam and, simultaneously, from the boundary conditions not being applied at the beam ends but rather at the hinge point.\n2.4.2. Assembly Analysis # For the analysis of stresses arising from a bolted connection, a finite element model was developed, considering only half of the beam due to symmetry effects. The resilient beam is connected to a rigid plate via a bolted connection. The applied load is 26.7 kN, and the beam\u0026rsquo;s self-weight is also accounted for in the simulation.\nBoundary conditions involve restricting rotation and translation at the lower base of the plate to which the beam is bolted, and considering symmetry in the beam, allowing for the modeling of only half of it.\nFor defining the connection at each bolt, a pre-load of 50900 N was specified, corresponding to an M36 bolt of grade 10.6.\nThe highest Von Mises equivalent stresses are located near the bolt head regions, measuring around 323 MPa, ensuring the mechanical strength criteria specified for the project.\nAdditionally, this model presents maximum stresses at the hole edge of the bolted plate, which increase as the mesh around it becomes finer. In this scenario, the existence of a geometric singularity (an edge without area) leading to very high stresses was considered. However, this singularity was disregarded in the analysis.\nThe maximum deflection in the deformed configuration of the beam was 4.27 mm, approximately half of the deflection obtained in the previous finite element model (simply supported beam).\n2.5. Welded Joint # In this section, the aim is to study the welded connection of the internal forces within the beam and the welded connection of the bolted fixation plates along with the welding between the plates.\nThe intention is to analyze the welded connection concerning static, yield, and fatigue aspects. Both components to be welded are made of the same material (AISI 1095 HR Steel).\n"},{"id":11,"href":"/docs/2code/5od/_index3/","title":"Particle Swarm Optimization","section":"Evolutionary Computation","content":" Introduction # "},{"id":12,"href":"/docs/3research/","title":"Research","section":"Docs","content":" Workflow Summary # In this following list, I showcase some of the projects I developped either through findings during my academic journey or some extracurricular projects with a few of my fellow friends. Hope you enjoy!\n# "},{"id":13,"href":"/docs/2code/1drone/_index4/","title":"Drone Controller Design Pt. 2","section":"RedBull Racing Competition","content":" Controller Design Pt.2 # 1 # "},{"id":14,"href":"/docs/1design/4mcomp/","title":"Finite Element Model Formulation","section":"Design Portfolio","content":" 1 Mathematical Background # 1.1 Partial Differential Equations (PDEs) # In engineering and physics, problems are often described by partial differential equations (PDEs). The \u0026ldquo;strong form\u0026rdquo; refers to the original differential equation that must hold exactly throughout the domain, including both the governing equation and the boundary conditions.\nHowever, there are cases where directly solving the strong form might be challenging due to complexities in the equation, irregular geometries, or varying boundary conditions. This is where the \u0026ldquo;weak formulation\u0026rdquo; or (\u0026ldquo;weak form\u0026rdquo;) becomes advantageous.\nThe weak form introduces a relaxation of the constraints imposed by the strong form by multiplying the governing equation with a weight function (typically a test function) and integrating it over the domain. This relaxation allows for more flexibility in solution techniques and offers several advantages:\nHandling Boundary Conditions: The weak form often simplifies the imposition of different types of boundary conditions.\nSolvability: Some differential equations in the strong form might not have exact solutions or might be difficult to solve directly. The weak form can lead to a more manageable equation for numerical methods.\nAdaptability to Numerical Methods: Finite element, boundary element, and other numerical methods are often more easily applied to weak formulations due to the integral nature of the equations.\nHandling Discontinuities: In problems involving discontinuities or singularities, the weak form can handle these cases more effectively.\nMinimization of Requirements: In some cases, the requirement for differentiability or the number of times an equation needs to be differentiated is reduced, easing computational complexity.\nOverall, the weak form is favoured in many situations because it relaxes the strictness of the original problem while maintaining the essential properties required for solutions, making it more adaptable for various solution techniques, especially in numerical analysis.\n1.2 Strong Form # Let\u0026rsquo;s begin by establishing the strong formulation of the problem, which serves as the foundation of our problem. In this formulation, we encapsulate the fundamental differential equation governing the system\u0026rsquo;s behaviour. This equation, along with the precise boundary conditions and initial values, constitutes the direct representation of the underlying physical laws guiding the system\u0026rsquo;s dynamics.\n\\[\\theta - \\nabla \\cdot (k \\nabla u) = f\\] For the torsional loading problem k = 1 and f = 2. The following equations indulge:\n\\[\\frac{\\partial^2 \\phi}{\\partial x^2} \u0026#43; \\frac{\\partial^2 \\phi}{\\partial y^2} = - 2G \\theta\\] This is referring to the Prandtl stress function, which defines shear stresses as:\n\\[\\tau_{xz} = \\frac{\\partial \\phi}{\\partial y} \\text{ and } \\tau_{yz} = \\frac{\\partial \\phi}{\\partial x}\\] The resolution of a torsion problem involves solving the Prandtl equation by imposing the boundary condition around the entire perimeter of the figure, as is known:\n\\[\\phi = 0\\] To do this, the Prandtl function is divided by \\(G\\theta\\) , considering this value is not known, as follows in the next set of expressions:\n\\[\\frac{\\partial^2 \\psi}{\\partial x^2} \u0026#43; \\frac{\\partial^2 \\psi}{\\partial y^2} = - 2 \\text{ and } \\psi = \\frac{\\phi}{G \\theta}\\] \\[\\tau_{yz} = -G \\theta \\frac{\\partial \\psi}{\\partial x} \\text{ and } \\tau_{xz} = G \\theta \\frac{\\partial \\psi}{\\partial y}\\] The developed program will calculate the solution given by \\(\\psi\\) for each node, the shear stresses, and the value of torsional rigidity. The problem of \\(G \\theta\\) is solved using the formula:\n\\[G \\theta = \\frac{Mt}{J}\\] In the previous formula, the M (torsional moment) and t (thickness) take the value of 1.\n1.3 Weak Form # The weak form enables transforming the differential equation into an integral equation, where the initial approach involves integrating the equation across the entire domain. Rules are applied to obtain the weak form, namely, defining the residual by multiplying it with an arbitrary function, integrating by parts the highest-order term, and rearranging the equation. Thus:\n\\[\\iint_S \\frac{\\partial \\phi_i}{\\partial x} \\frac{\\partial \\phi_j}{\\partial x} \u0026#43; \\frac{\\partial \\phi_i}{\\partial y} \\frac{\\partial \\phi_j}{\\partial y} dA = \\iint_S 2\\phi_i dA\\] The stiffnex matrix is given by:\n\\[K_{ij} = \\iint_S \\frac{\\partial \\phi_i}{\\partial x} \\frac{\\partial \\phi_j}{\\partial x} \u0026#43; \\frac{\\partial \\phi_i}{\\partial y} \\frac{\\partial \\phi_j}{\\partial y} dx dy\\] Additionally, the load vector is presented as:\n\\[F_i = \\iint_S 2 \\phi_i dx dy\\] In the considered problem, the only essential boundary condition will be the null solution across the entire perimeter of the figure, accompanied by a distributed load of magnitude 2 applied across the entire mesh.\n1.4 Analytical Integration # Simplifying the problem\u0026rsquo;s resolution, only regular 4-node elements with 1 degree of freedom will be considered. Information from the book \u0026ldquo;Introduction to the Finite Element Method (3rd edition)\u0026rdquo; by J.N. Reddy provides the following details:\nStiffness matrix (e): \\(K^e = \\frac{k}{6ab} \\begin{bmatrix} 2(a^2\u0026#43;b^2) \u0026amp; a^2-2b^2 \u0026amp; -(a^2\u0026#43;b^2) \u0026amp; -2a^2\u0026#43;b^2\\\\ a^2-2b^2 \u0026amp; 2(a^2\u0026#43;b^2) \u0026amp; -2a^2\u0026#43;b^2 \u0026amp; -(a^2\u0026#43;b^2)\\\\ -(a^2\u0026#43;b^2) \u0026amp; -2a^2\u0026#43;b^2 \u0026amp; 2(a^2\u0026#43;b^2) \u0026amp; a^2-2b^2\\\\ -2a^2\u0026#43;b^2 \u0026amp; -(a^2\u0026#43;b^2) \u0026amp; a^2-2b^2 \u0026amp; 2(a^2\u0026#43;b^2)\\\\ \\end{bmatrix} \\) Load vector (e): \\(f^e =\\frac{fab}{4} \\begin{bmatrix} 1\\\\ 1\\\\ 1\\\\ 1\\\\ \\end{bmatrix} \\) Where \u0026lsquo;a\u0026rsquo; corresponds to the length of the base of the element, and \u0026lsquo;b\u0026rsquo; corresponds to the height of the element.\n1.5 Numerical Integration # These functions aim to calculate the elemental stiffness matrix using the Gauss-Jordan approximation, which simplifies integration to a summation. To achieve this, a coordinate transformation from \\((x,y)\\) to \\( (\\xi, \\eta) \\) is applied, while also computing the Jacobian of this transformation. Subsequently, the rules of Gauss points are employed.\nIn Gauss integration, the stiffness matrix K is computed through reduced integrals:\n\\[K_{ij} = \\frac{\\partial \\phi_i}{\\partial x} \\frac{\\partial \\phi_j}{\\partial x} \u0026#43; \\frac{\\partial \\phi_i}{\\partial y} \\frac{\\partial \\phi_j}{\\partial y} \\times J \\times w\\] \\[J = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi} \u0026amp; \\frac{\\partial x}{\\partial \\eta}\\\\ \\frac{\\partial y}{\\partial \\xi} \u0026amp; \\frac{\\partial y}{\\partial \\eta}\\\\ \\end{bmatrix} = \\frac{ab}{4}\\] In the previous Gauss integration, \u0026lsquo;w\u0026rsquo; corresponds to the integration weights. For a 1x1 integration, the integration is performed solely at the center of the element, with a weight of w = 1. For 2x1 or 1x2 integration, each \u0026lsquo;w\u0026rsquo; value represents the sum of 2 reduced integrals (2 different points within the element), and the weight is w=2. For a 2x2 integration, the summation includes 4 reduced integrals (4 different points), and w=1. The following values of \\(\\overline{x}\\) and \\(\\overline{y}\\) correspond to the Gauss points:\n\\[\\phi_1 = (1-\\frac{\\overline{y}}{b})(1-\\frac{\\overline{x}}{a}) \\quad \\quad \\phi_2 = \\frac{\\overline{x}}{a}(1-\\frac{\\overline{y}}{b})\\] \\[\\phi_3 = \\frac{\\overline{y}}{b}\\frac{\\overline{x}}{a} \\quad \\quad \\phi_4 = \\frac{\\overline{y}}{b}(1-\\frac{\\overline{x}}{a})\\] Consequently:\n\\[ \\text{1x1 Rule} : \\overline{x}=\\frac{a}{2} \\quad \\text{and} \\quad \\overline{y}=\\frac{b}{2}\\] \\[ \\text{2x2 Rule} : \\overline{x_{1,2}}=\\frac{a}{2}(1 \\pm \\sqrt{\\frac{1}{3}}) \\quad \\text{and} \\quad \\overline{y_{1,2}}=\\frac{b}{2}(1 \\pm \\sqrt{\\frac{1}{3}})\\] 1.6 Torsional Constant # After calculating the nodal solution, the torsion constant J can be determined by:\n\\[J^e = \\int_0^b \\int_0^a 2 \\psi^e dxdy = \\frac{ab}{2}(\\psi_1 \u0026#43; \\psi_2 \u0026#43; \\psi_3 \u0026#43; \\psi_4) \\qquad J = \\sum_i J_i^e\\] 1.7 Shear Stresses # \\[\\tau_{yz} = -G \\theta \\frac{\\partial \\psi}{\\partial x} = -G \\theta (\\frac{\\partial \\phi_1}{\\partial \\overline{x}}\\psi_1 \u0026#43; \\frac{\\partial \\phi_2}{\\partial \\overline{x}}\\psi_2 \u0026#43; \\frac{\\partial \\phi_3}{\\partial \\overline{x}}\\psi_3 \u0026#43; \\frac{\\partial \\phi_4}{\\partial \\overline{x}}\\psi_4)\\] \\[\\tau_{xz} = G \\theta \\frac{\\partial \\psi}{\\partial y} = G \\theta (\\frac{\\partial \\phi_1}{\\partial \\overline{y}}\\psi_1 \u0026#43; \\frac{\\partial \\phi_2}{\\partial \\overline{y}}\\psi_2 \u0026#43; \\frac{\\partial \\phi_3}{\\partial \\overline{y}}\\psi_3 \u0026#43; \\frac{\\partial \\phi_4}{\\partial \\overline{y}}\\psi_4)\\] \\[\\tau_{xy} = \\sqrt{\\tau_{yz}^2 \u0026#43;\\tau_{xz}^2}\\] 2 Time for some coding! # 2.1 READ_ME # The program starts by executing the script \u0026ldquo;MainG10.m\u0026rdquo; directly available on my github page and should contain all the subfunctions and their respective \u0026rsquo;txt\u0026rsquo; files in the respective folder. Once the program is initiated, the user inputs the data file name in the form of \u0026ldquo;nome.txt.\u0026rdquo; The data file should contain the node coordinates, connectivity matrix, and boundary conditions. The data file created for this problem is named \u0026ldquo;dadosg10.txt\u0026rdquo;.\nAfter submitting the data file, the program reads the file and automatically opens a figure displaying the mesh with numbered nodes and elements. Simultaneously, a menu with various options is displayed. The user should first choose the type of integration and then select the desired plots for shear stresses, stress contour lines, and nodal solutions. Submitting the options is done by entering the corresponding number. The program is terminated by entering the number 0.\nUpon program completion, a file is created containing the data obtained from the last integration performed.\nREMARK: The node numbering associated with a given element in the incidence matrix is done counterclockwise, as shown in the accompanying image. Any other numbering will yield incorrect results for solving this problem. The coordinates in the node matrix are in SI units, therefore in meters. Introducing values in different units in the data file will result in incorrect units in the final program output. The material conductivity or property should be 1; if it\u0026rsquo;s not, the results won\u0026rsquo;t be valid for this torsion problem. Regarding boundary conditions, only essential boundary conditions equal to zero are allowed. However, they will be set to zero if another finite value is associated. The distributed loading assumes the value 2; however, if the value differs, the program will still provide resultsâ€”though they may not be reasonable for solving the initially presented problem. All other boundary conditions should be null, and if they\u0026rsquo;re not, an error message will be displayed.\n2.2 Validation Based on Book # The developed program has been tested for a known problem described in the book \u0026ldquo;Introduction to the Finite Element Method (3rd edition)\u0026rdquo; by J.N. Reddy - Example 8.5.6. In this example, torsion of a square section bar was considered. As the problem is axisymmetric, nodal solution and shear stresses were calculated for a quarter of the square. The following results were obtained at the nodes for the nodal solution, using a 4x4 mesh:\n\\[\\begin{bmatrix} x \u0026amp; y \u0026amp; \\text{Analytical} \u0026amp; \\text{Gauss 2x2} \u0026amp; \\text{Gauss 1x2} \u0026amp; \\text{Gauss 1x1} \u0026amp; \\text{Reddy} \\\\ 0.0000 \u0026amp; 0.0000 \u0026amp; 0.1492 \u0026amp; 0.1492 \u0026amp; 0.1501 \u0026amp; 0.1513 \u0026amp; 0.1492 \\\\ 0.1250 \u0026amp; 0.0000 \u0026amp; 0.1412 \u0026amp; 0.1412 \u0026amp; 0.1421 \u0026amp; 0.1429 \u0026amp; 0.1412 \\\\ 0.2500 \u0026amp; 0.0000 \u0026amp; 0.1161 \u0026amp; 0.1161 \u0026amp; 0.1168 \u0026amp; 0.1176 \u0026amp; 0.1161 \\\\ 0.3750 \u0026amp; 0.0000 \u0026amp; 0.0707 \u0026amp; 0.0707 \u0026amp; 0.0711 \u0026amp; 0.0714 \u0026amp; 0.0707 \\\\ 0.1250 \u0026amp; 0.2500 \u0026amp; 0.1103 \u0026amp; 0.1103 \u0026amp; 0.1110 \u0026amp; 0.1116 \u0026amp; 0.1103 \\\\ 0.2500 \u0026amp; 0.2500 \u0026amp; 0.0919 \u0026amp; 0.0919 \u0026amp; 0.0926 \u0026amp; 0.0935 \u0026amp; 0.0919 \\\\ 0.3750 \u0026amp; 0.2500 \u0026amp; 0.0573 \u0026amp; 0.0573 \u0026amp; 0.0577 \u0026amp; 0.0580 \u0026amp; 0.0573 \\\\ \\end{bmatrix}\\] The following results were obtained for \\(\\bar{\\tau_{yz}} = \\frac{\\tau_{yz}}{G\\theta} = \\tau_{yz} \\times J\\) for 4x4 mesh:\n\\[\\begin{bmatrix} x \u0026amp; y \u0026amp; \\text{Analytical} \u0026amp; \\text{Gauss 2x2} \u0026amp; \\text{Gauss 1x2} \u0026amp; \\text{Gauss 1x1} \u0026amp; \\text{Known Sol.} \\\\ 0.06250 \u0026amp; 0.0625 \u0026amp; 0.0618 \u0026amp; 0.0618 \u0026amp; 0.0621 \u0026amp; 0.0625 \u0026amp; 0.0618 \\\\ 0.1875 \u0026amp; 0.0625 \u0026amp; 0.1942 \u0026amp; 0.1942 \u0026amp; 0.1955 \u0026amp; 0.1970 \u0026amp; 0.1939 \\\\ 0.3125 \u0026amp; 0.0625 \u0026amp; 0.3529 \u0026amp; 0.3529 \u0026amp; 0.3553 \u0026amp; 0.3577 \u0026amp; 0.3516 \\\\ 0.4375 \u0026amp; 0.0625 \u0026amp; 0.5528 \u0026amp; 0.5528 \u0026amp; 0.5560 \u0026amp; 0.5593 \u0026amp; 0.5504 \\\\ \\end{bmatrix}\\] It\u0026rsquo;s observed that stiffness matrices obtained through analytical integration or Gauss 2x2 are closely aligned with the known values. In fact, the values from analytical integration and Gauss 2x2 are identical when approximated to 4 decimal places. The fewer points used in the Gauss integration, the greater the error, with Gauss 1x1 showing the largest discrepancy between obtained and known values. The largest relative error found in analytical integration and Gauss 2x2 was 0.436%. For Gauss 1x2 integration, the largest relative error was 1.05%, while Gauss 1x1 integration showed the largest relative error of 1.73%. Overall, the values are close to the known ones, indicating that the developed program is functioning correctly.\n3 Comparison with FEM commercial software Siemens NX # In addition, the problem was tackled by resorting to the commercial software NX, which unfortunately lacks a dedicated solver for torsion problems. As a workaround, the issue was addressed using the Sol 153 solver â€“ Steady State Nonlinear Heat Transfer. This approach was selected due to the analogy between torsion and heat problems. Specific conditions were applied, including setting a boundary temperature at T = 0Â°C, introducing a uniform heat generation of 2 W/mÂ³ throughout the section, and assigning a thermal conductivity value of K = 1 to the material. To compare results, the Prandtl function was solved using different integration methods in Matlab against the outcomes obtained through NX.\nThe data from the upcoming tables indicates that the minimum error occurs in the analytical integration type and in the numerical integration type with 2x2 Gauss points. As observed in the known problem, the error values are identical for these two integration types. It\u0026rsquo;s worth noting that in the 1x1 Gauss points integration, there is a considerable relative error percentage (15.2%), which decreases in the case of 2x1 (8.6%) and 1x2 Gauss points (4.84%)\n3.1 Analytical Integration # Maximum error deviation: 3,99501E-06%\n3.2 Gauss Integration 2x2 # Maximum error deviation: 3,99501E-06 %\n3.3 Gauss Integration 2x1 # Maximum error deviation: 8,605963869 %\n3.4 Gauss Integration 1x2 # Maximum error deviation: 4,839239833 %\n3.5 Gauss Integration 1x1 # Maximum error deviation: 15,19098164 %\n3.6 Calculation of Torsion Coefficients NX vs. Matlab # The nodal solution values, node positions, and connectivity matrix data in NX were used to compute the torsion constant, J, akin to the calculations performed for J in the analytical or Gauss integrations in Matlab.\nCalculating the value of J for various refinements yielded:\n\\[\\begin{bmatrix} \\text{Number of nodes} \u0026amp; J \\text{computed from NX} (m^4) \\\\ 96 \u0026amp; 6.11911850 \\times 10^{-5} \\\\ 234 \u0026amp; 6.85679916 \\times 10^{-5} \\\\ 600 \u0026amp; 7.06099102 \\times 10^{-5} \\\\ 1765 \u0026amp; 7.13958341 \\times 10^{-5} \\\\ 4720 \u0026amp; 7.16633419 \\times 10^{-5} \\\\ 41461 \u0026amp; 7.18205027 \\times 10^{-5} \\\\ \\end{bmatrix}\\] For the considered 96 nodes:\n\\[\\begin{bmatrix} \\text{J NX} (m^4) \u0026amp; \\text{J Matlab} (m^4) \u0026amp; \\text{Relative Error} (\\%) \\\\ 6.1191185 \\times 10^{-5} \u0026amp; 6.11890982 \\times 10^{-5} \u0026amp; 3.41041 \\times 10^{-3} \\\\ \\end{bmatrix}\\] The conclusion drawn from these findings is that as the mesh undergoes refinement, the constant torsion value J tends to stabilize. It\u0026rsquo;s evident from these results that the approximation done by Matlab remains quite acceptable. This is highlighted by the fact that the J value derived from Matlab aligns closely with the analytical integration value and is also in close proximity to the J value computed in NX for 96 nodes, which itself approximates the converged value.\n3.6 Calculation of Maximum and Minimum Stresses NX vs. Matlab # \\[\\begin{bmatrix} \\text{Stresses} \u0026amp; \\text{Matlab} \u0026amp; \\text{NX} \u0026amp; \\text{Relative Error} (\\%) \\\\ \\text{Maximum (Pa)} \u0026amp; 1279.447 \u0026amp; 1279.404 \u0026amp; 3.40677E-03 \\\\ \\text{Minimum (Pa)} \u0026amp; 25.790852 \u0026amp; 25.789972 \u0026amp; 3.41135E-03 \\\\ \\end{bmatrix}\\] The comparison between the results from Matlab (analytical integration) and NX led to the conclusion that quite satisfactory outcomes were attained. It was observed that the relative error obtained for the extreme values falls within the order of \\(10^{-3}\\) in percentage.\n3.7 Results Siemens NX # The initial mesh comprises 96 nodes. The mesh underwent 5 refinements to analyze the convergence of values. The results for the temperature distribution and gradient distribution are presented below for the six meshes, respectively on the left and right sides.\nMeshing in NX Siemens: Initial Mesh - (click to expand) Lastly, the 41468 nodes are represented for the final mesh refinement.\nMeshing in NX Siemens: Final Mesh - (click to expand) 3.8 Results MATLAB # When the program is executed, it generates several figures such as the mesh representation with numbered elements and nodes, the contour lines representing stress, and the display of shear stresses with their respective distribution.\nElements and Nodes of the Mesh Shear Stress Ditribution Shear Stress Contour Plot Nodal Solution: Analytical Integration Isometric View: Stress Isolines The nodal solution values, distribution of shear stresses, value of J, and torsional stiffness were, in addition, also obtained from the analytical integration, as reported.\nMinimum stress of 1.28 \\(\\times 10^{3}\\) Pa: (x,y) = (2.0 \\(\\times 10^{-1}\\) , 1.1 \\(\\times 10^{-1}\\) ) m Minimum stress of 2.58 \\(\\times 10^{1}\\) Pa: (x,y) = (2.4 \\(\\times 10^{-1}\\) , 9.0 \\(\\times 10^{-2}\\) ) m Torsion cofficient J: 6.11 \\(\\times 10^{-5} Pa \\cdot m^4\\) Torsional stiffness GJ: 4.65 \\(\\times 10^{6} Pa \\cdot m^4\\) To calculate GJ, the torsional stiffness, simply multiply the torsion coefficient J by the shear modulus, typically around 76 GPa.\nThe End # The goals set for this torsion problem were achieved, acknowledging that the errors observed between the NX and Matlab outputs were not substantial, indicating acceptable results.\n"},{"id":15,"href":"/docs/1design/5om/","title":"Compound Cylindrical Gear Train","section":"Design Portfolio","content":" Introduction # "},{"id":16,"href":"/docs/2code/1drone/_index5/","title":"Drone Computer Vision","section":"RedBull Racing Competition","content":" Computer Vision for Obstacle Detection # 1 Description # In preparation for the Red Bull drone race, a comprehensive dataset was compiled, consisting of images capturing gates from diverse angles, distances, and lighting conditions. These images showcase the gates amidst various backgrounds, providing a range of scenarios that drones might encounter during the race. The intention behind gathering such a varied dataset is to enable the development of an algorithm capable of accurately identifying these gates despite changes in perspective, distance, lighting, and background colors, facilitating precise navigation for the drones during the high-paced race.\n2 Gate Characterization # The analysis of the images reveals that the gates used for detection exhibit a shallow square shape, predominantly appearing in shades of blue along their sides and darker tones overall. Each gate features white letters and small squares within them, affixed to a metal structure supported by two ground-based supports. While the gates primarily share a base color, variations in lighting conditions result in perceptible differences. For instance, exposure to red light causes the white small squares to take on a red hue, as follows:\n2.1 Colorspace Region Segmentation # The initial phase involves image segmentation, commencing with a test set of images showcase below. These specific images were chosen due to their similarity in appearance, presenting a frontal view to the camera with minimal distortion and consistent colors unaffected by varying lighting conditions. This selection aims to establish a baseline for segmentation, allowing for a focused and controlled analysis of gate recognition and isolation within these images.\nThe strategy involved an examination of different color spaces to identify potential relationships between them. It was done by observing the RGB color space aiming to discern any possible connections or patterns among the color channels within the images.\nIn the image, it is seen the original RGB components as they are, without any changes. It\u0026rsquo;s hard to spot the gate distinctly from the background in any of these components. None of them make the gate stand out separately. So, it looks like using these RGB components isn\u0026rsquo;t the best for separating the gate from the rest. Next up was trying out the HSV color representation.\nIn the HSV representation, an adjustment was made to the original images specifically for the Hue component. The process involved converting the image to the HSV color space, modifying its Saturation and Value components to a saturation of 1, and then re-converting the image back to the RGB color space. This resulted in a representation highlighting the genuine colors of the image, with only the Hue component \u0026ldquo;enabled\u0026rdquo;.\nWhen the image is observed, the gate is distinctly noticeable from the background in the Hue component. The dark and blue tones from the original picture are reflected as dark blue in the Hue representation, while the small white squares take on a magenta hue. The background spans a range from light blue to green and red in this representation. While the Saturation and Value components alone do not facilitate gate identification.\nThe Lab and YCbCr representations didn\u0026rsquo;t yield satisfactory results as the distinction between the background and the gate was hardly noticeable. Consequently, the HSV color space emerged as the most effective choice for segmenting the gate in the images.\nTo execute the segmentation, the images from the test dataset were examined in their HSV representations. Through visual inspection and some trial and error, specific conditions (thresholds) for the HSV values were established to pinpoint the gate\u0026rsquo;s location.\nThis process generated a black and white image where all the points meeting the conditions were highlighted. However, restricting the HSV values alone proved insufficient. Some parts of the background shared similar HSV values with the gate, leading to noise in the resulting images.\n2.2 Black and White Segmentation # Applying thresholds to the HSV values, a first approximation of the gate can be found.\nTo refine the image, several morphological operations need to be applied. In exploring various techniques, one solution considered was to initiate the noise reduction process by cropping the initial image. Utilizing a cropping function facilitated the selection of a specific region of interest (ROI). An illustration of this method is depicted in the subsequent figure.\nWhile the outcomes appeared acceptable for the selected images in the testing set where the gate was in proximity to the camera, this method was ultimately dismissed. Its limitation became apparent with images where the gate was situated farther away, rendering the approach less effective. Moreover, in real-life scenarios involving drones that sway considerably from side to side, cropping the image and narrowing the field of vision was deemed risky. This approach could potentially result in the drone losing track of the gate entirely, which is an undesirable outcome.\n2.3 Morphological Operations # To isolate the gate and eliminate unwanted noise, a shift in approach was necessary, focusing on morphological operations. For the test image set, various scenarios were taken into account based on the image conditions. In the general case, the following morphological operations were applied:\n1. Small dilation operation: Utilizing the MATLAB function \u0026lsquo;imdilate\u0026rsquo;, this operation aimed to connect isolated pixels located at the corners of the gate with the rest of the gate. The \u0026lsquo;cube\u0026rsquo; structure with a magnitude of 2 was employed for this purpose. 2. Retaining the largest area: This step involved employing the MATLAB function \u0026lsquo;bwareafilt\u0026rsquo; to retain solely the gate in the black and white image. Initially, all connected components within a specified range were extracted, followed by preserving solely the largest area. This process became necessary due to potential noise accumulation and formation of objects in the image caused by the dilation process in certain cases. 3. Closing small holes: The MATLAB function \u0026lsquo;imclose\u0026rsquo; function was employed to close only the small holes that form part of the gate shape. This operation aimed to fill these small gaps within the gate structure. A closing operation with a magnitude of 80 was applied using the \u0026lsquo;cube\u0026rsquo; structure to ensure closure when the gate shape wasn\u0026rsquo;t entirely closed (e.g., when the rectangle wasn\u0026rsquo;t fully closed). It\u0026rsquo;s worth noting that the MATLAB function \u0026lsquo;imfill\u0026rsquo; function was avoided to prevent inadvertently filling the actual opening of the gate where drones navigate through. 4. Smoothing the region: To further refine the image and eliminate residual noise, an MATLAB function \u0026lsquo;imopen\u0026rsquo; operation was executed using the \u0026lsquo;cube\u0026rsquo; structure with a magnitude of 20. This process aids in cleaning up any remaining artifacts or noise in the image. Notably, employing a higher magnitude might risk reopening the gate\u0026rsquo;s rectangular structure itself, hence the careful choice of parameters for this operation. 5. Reapplying the mask derived from the obtained black and white image: This was achieved by performing a boolean logic multiplication between the black and white image (acting as a mask) and the original image. The result was a segmented image where the gate was isolated and distinctly visible. Another method explored was the superpixels technique which involves segmenting the image. It is a relatively state-of-the-art technique that often couples numerous superpixels with clustering to enhance image recognition.There are recent papers being published, but a particularly interesting one can be seen here.. The divided image contain many superpixels and each superpixel is then represented by the average color value within its region. The intention behind this approach was to implement the superpixels segmentation preceding the HSV segmentation and assess whether this sequential method could yield improved results. The goal was to evaluate if the combination of superpixels segmentation followed by HSV segmentation could enhance the accuracy of isolating the gate in the images.\nThis method helps reducing the number of different colors in the image which could help the segmentation process in some cases.\nThis method was found to be functional but lacked reliability for consistent segmentation. A lower count of superpixels resulted in poorer outcomes, while a higher count led to slower segmentation without notable improvement. Moreover, in some instances, an increased count made segmentation more challenging as the gate and background merged together.\nThe segmentation algorithm underwent testing on various images. It worked well for images with similar background colors and lighting conditions, often necessitating minor adjustments to the thresholds for optimization. However, for other images, a new set of thresholds had to be determined.\nTo facilitate threshold selection, two new parameters were introduced to group images with similar colors. One parameter, denoted as \u0026lsquo;c\u0026rsquo;, signifies the center of mass of the histogram obtained using the MATLAB \u0026lsquo;imhist\u0026rsquo; function. This parameter helped isolate images with pink or red backgrounds, requiring unique thresholds due to their distinct characteristics. Additionally, two images featuring a large red and black banner in the background were also isolated as they demanded slight threshold adjustments.\nThe second parameter was established to represent the x-coordinate with the maximum value in the histogram obtained from MATLAB \u0026lsquo;imhist\u0026rsquo; function. This parameter primarily aided in segregating an image with a blue background. While this image had a \u0026lsquo;c\u0026rsquo; parameter similar to others in the testing set, it necessitated different thresholds owing to the blending of the blue background with the gate\u0026rsquo;s blue.\nImages with distinct thresholds also required minor modifications to the order of morphological operations.\nSegmented\n2.4 Edge Detection # The next phase involved edge detection to outline the gate\u0026rsquo;s boundaries using various methods of the MATLAB function \u0026rsquo;edge\u0026rsquo;. The previously obtained segmented image was utilized due to its superior performance in noise removal and clear delineation of the gate.\nThree distinct methods were employed:\nCanny Method: This technique identifies edges by seeking local maximums of the gradient of the image. The gradient is derived from a Gaussian filter. It uses two thresholdsâ€”one for strong edges and another for weak edges. Weak edges are included in the output only if they are connected to strong edges. Sobel Operator: This method convolves the image with a small, separable, and integer-valued filter along the horizontal and vertical directions. While computationally inexpensive, its gradient approximation can be relatively coarse, especially for high-frequency variations in the image. Laplacian Filters: These filters are derivative-based and designed to detect areas of rapid change (edges) in images. As derivative filters are sensitive to noise, it\u0026rsquo;s common practice to smooth the image (e.g., using a Gaussian filter) before applying the Laplacian. This combined process is known as the Laplacian of Gaussian (LoG) operation: \\[L(x, y) = \\nabla^2 f(x, y) = \\frac{\\partial^2 f(x, y)}{\\partial x^2} \u0026#43; \\frac{\\partial^2 f(x, y)}{\\partial y^2}\\] The representation of the 2D LoG (Laplacian of Gaussian) function centered on zero and with a Gaussian standard deviation \\(\\sigma\\) is given by:\n\\[\\text{LoG}(x, y) = -\\frac{1}{\\pi \\sigma^4} \\left(1 - \\frac{x^2 \u0026#43; y^2}{2\\sigma^2}\\right) e^{-\\frac{x^2 \u0026#43; y^2}{2\\sigma^2}}\\] Edge detection was carried out on two types of images: the BW mask acquired during the segmentation process and the segmented images. Conducting edge detection on the original images was dismissed due to the excessive background information it would provide.\nWhen performing edge detection on the BW mask, the expected outcome was solely the contours of the mask, encompassing both inner and outer rectangles. Conversely, edge detection on the segmented image aimed to extract additional features such as letters and squares, with the option to adjust the number of extracted features using a threshold.\nThe results displayed two images: edge detection on the BW mask was shown on the left, while edge detection on the segmented image was depicted on the right. The superiority of the Canny method\u0026rsquo;s results was attributed mainly to the adjustability of its two thresholds.\n2.5 Hough Transform # The Hough Transform involves identifying lines within an image by grouping edge points into object candidates, which undergo a voting procedure. This process occurs in a parameter space where the object candidates are considered local maxima. Each point in the Hough Space is represented by two parameters, Rho ( \\(\\rho\\) ) and Theta ( \\(\\theta\\) ). Rho represents the perpendicular distance from the origin to the line, while theta denotes the angle between the x-axis and this vector.\nThe MATLAB implementation comprises a series of functions. The MATLAB function \u0026lsquo;hough\u0026rsquo; computes the Standard Hough Transform (SHT) of a binary image, producing outputs of rho, theta, and H, a matrix representing the parameter space. Subsequently, the MATLAB function \u0026lsquo;houghpeaks\u0026rsquo; locates peaks in the Hough Transform Matrix, typically selecting 20 peaks. Finally, the MATLAB function \u0026lsquo;houghlines\u0026rsquo; function identifies line segments within the image, returning a structure array that represents the merged line segments.\nHough lines serve as an alternative method for line detection. In this case, the Hough lines were applied to the BW mask generated from the Canny edges, as the Canny method displayed the most promising results. This application aimed to enhance the lines extracted from the edges, particularly emphasizing the extremes of the gate. The results are depicted below.\n2.6 Extreme Points and Centroid # The function \u0026lsquo;CornerDetec\u0026rsquo; was created to calculate the extreme points of the gate image post edge detection. As the gate consistently maintains a square shape, the extreme points can be defined by a sequence of maximum and minimum x and y coordinates. For instance, the top-right corner would be the point where the sum of the x and y coordinates is maximized.\nDetermining the centroid involved using the MATLAB function \u0026lsquo;regionprops\u0026rsquo;. Given the gate\u0026rsquo;s square and axisymmetric shape, the centroid could be extracted using either the inner or outer square of the gate.\nDespite prior morphological operations aimed at refining the segmentation quality, residual noise persisted within the images. To reduce the error between the actual centroid and the estimated centroid, the inner square of the gate, less susceptible to edge detection errors, was utilized. In cases where the inner square wasn\u0026rsquo;t entirely identified, the centroid of the outer square was plotted instead.\nResults: Identification of centroid on a different image - (click to expand) Results: Identification of centroid on all images - (click to expand) Results: Identification of hough lines on all images - (click to expand) 2.7 Image Enhancement # To accentuate the gate within the image, the region corresponding to the gate was emphasized. This was achieved by inverting the mask obtained from the segmentation process. Inverting the mask allowed for the removal of the gate from the original image and isolating it for highlighting purposes. To accomplish this, each color channel of the inverted mask was isolated and subsequently combined to create a true color RGB image. Additionally, the lines detected from the extreme points were plotted on this highlighted gate region to further outline its boundaries.\nThe conversion from RGB to HSV can be applied to this image. It\u0026rsquo;s important to note that the green lines visible in the figure are not inherent to the image; they are plotted lines and, consequently, do not manifest in the HSV representation.\nUpon observing the HSV components, it becomes apparent that the gate is distinctly highlighted in the Saturation and Value images. For all the image datasets:\n3 Section End # It became evident that arriving at a solution wasn\u0026rsquo;t straightforward, and while the obtained solution wasn\u0026rsquo;t perfect, it showcased potential for optimization with an expanded dataset. Additional images would enhance the algorithm\u0026rsquo;s ability to recognize the gate under various lighting conditions and backgrounds. Nonetheless, color segmentation emerged as an effective means to segment the gate.\nAmong edge detection methods, the Canny approach stood out as the most effective, although other methods also demonstrated reasonable performance. The Hough transform offered an alternative method to identify lines, proving to be a decent performer.\nDespite minor imperfections resulting from imperfect segmentation, the detection of extreme points and centroids was generally successful.\nUltimately, in this section the work done successfully achieved its goal by effectively isolating and enhancing the gate. Employing various solutions contributed to solving the challenge of gate identification for drone competitions.\n4 Next Steps # The next step could involve exploring the integration of machine learning techniques to further enhance the gate identification process, potentially leading to real-time detection capabilities. Machine learning models, such as convolutional neural networks (CNNs) or other deep learning architectures, could be trained on an expanded dataset to improve gate recognition across diverse conditions. This adaptation could pave the way for more robust and efficient gate identification systems, especially in real-time scenarios during drone competitions.\n"},{"id":17,"href":"/docs/2code/5od/","title":"Evolutionary Computation","section":"Coding Portfolio","content":" Introduction # "},{"id":18,"href":"/docs/2code/6auto/","title":"Industrial Automation","section":"Coding Portfolio","content":" Introduction # "},{"id":19,"href":"/docs/2code/7rman/","title":"Manipulator Robotics: JACO","section":"Coding Portfolio","content":" Introduction # "}]